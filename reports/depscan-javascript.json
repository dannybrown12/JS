{"id": "CVE-2019-1010266", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.11", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nlodash prior to 4.7.11 is affected by: CWE 400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.7.11.\nUpgrade to version 4.17.11 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "NPM-1085685", "package": "npm:mem", "purl": "pkg:npm/mem@1.1.0", "package_type": "npm", "package_usage": "optional", "version": "1.1.0", "fix_version": "4.0.0", "severity": "MEDIUM", "cvss_score": "5.1", "short_description": "# Denial of Service in mem\nVersions of `mem` prior to 4.0.0 are vulnerable to Denial of Service (DoS).\tThe package fails to remove old values from the cache even after a value passes its `maxAge` property. This may allow attackers to exhaust the system's memory if they are able to abuse the application logging.\n\n\n## Recommendation\n\nUpgrade to version 4.0.0 or later.\nUpgrade to version 4.0.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-35149", "package": "npm:mquery", "purl": "pkg:npm/mquery@1.6.3", "package_type": "npm", "package_usage": "optional", "version": "1.6.3", "fix_version": "3.2.3", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Code Injection in mquery\nlib/utils.js in mquery before 3.2.3 allows a pollution attack because a special property (e.g., __proto__) can be copied during a merge or clone operation.\nUpgrade to version 3.2.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2019-10775", "package": "npm:ecstatic", "purl": "pkg:npm/ecstatic@3.3.2", "package_type": "npm", "package_usage": "optional", "version": "3.3.2", "fix_version": "4.1.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Denial of Service in ecstatic\necstatic have a denial of service vulnerability. Successful exploitation could lead to crash of an application.\nUpgrade to version 4.1.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1086754", "package": "npm:mongodb", "purl": "pkg:npm/mongodb@2.0.46", "package_type": "npm", "package_usage": "optional", "version": "2.0.46", "fix_version": "3.1.13", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial of Service in mongodb\nVersions of `mongodb` prior to 3.1.13 are vulnerable to Denial of Service. The package fails to properly catch an exception when a collection name is invalid and the DB does not exist, crashing the application.\n\n\n## Recommendation\n\nUpgrade to version 3.1.13 or later.\nUpgrade to version 3.1.13 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1086801", "package": "npm:marsdb", "purl": "pkg:npm/marsdb@0.6.11", "package_type": "npm", "package_usage": "required", "version": "0.6.11", "fix_version": null, "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Command Injection in marsdb\nAll versions of `marsdb` are vulnerable to Command Injection. In the `DocumentMatcher` class, selectors on `$where` clauses are passed to a Function constructor unsanitized. This allows attackers to run arbitrary commands in the system when the function is executed.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.\nNone", "related_urls": [], "occurrence_count": 1, "reachable_flows": 0}
{"id": "CVE-2016-1000223", "package": "npm:jws", "purl": "pkg:npm/jws@0.2.6", "package_type": "npm", "package_usage": "required", "version": "0.2.6", "fix_version": "3.0.0", "severity": "HIGH", "cvss_score": "8.7", "short_description": "# Forgeable Public/Private Tokens in jws\nAffected versions of the `jws` package allow users to select what algorithm the server will use to verify a provided JWT. A malicious actor can use this behaviour to arbitrarily modify the contents of a JWT while still passing verification. For the common use case of the JWT as a bearer token, the end result is a complete authentication bypass with minimal effort.\n\n\n\n\n## Recommendation\n\nUpdate to version 3.0.0 or later.\nUpgrade to version 3.0.0 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "NPM-1088022", "package": "npm:marked", "purl": "pkg:npm/marked@0.4.0", "package_type": "npm", "package_usage": "optional", "version": "0.4.0", "fix_version": "0.6.2", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Marked ReDoS due to email addresses being evaluated in quadratic time\nVersions of `marked` from 0.3.14 until 0.6.2 are vulnerable to Regular Expression Denial of Service. Email addresses may be evaluated in quadratic time, allowing attackers to potentially crash the node process due to resource exhaustion.\n\n\n## Recommendation\n\nUpgrade to version 0.6.2 or later.\nUpgrade to version 0.6.2 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1088594", "package": "npm:d3-color", "purl": "pkg:npm/d3-color@1.4.1", "package_type": "npm", "package_usage": "optional", "version": "1.4.1", "fix_version": "3.1.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# d3 color vulnerable to ReDoS\nThe d3 color module provides representations for various color spaces in the browser. Versions prior to 3.1.0 are vulnerable to a Regular expression Denial of Service. This issue has been patched in version 3.1.0. There are no known workarounds.\nUpgrade to version 3.1.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23771", "package": "npm:notevil", "purl": "pkg:npm/notevil@1.3.3", "package_type": "npm", "package_usage": "required", "version": "1.3.3", "fix_version": null, "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Sandbox escape in notevil and argencoders notevil\nThis affects all versions of package notevil; all versions of package argencoders notevil. It is vulnerable to Sandbox Escape leading to Prototype pollution. The package fails to restrict access to the main context, allowing an attacker to add or modify an object's prototype. **Note:** This vulnerability derives from an incomplete fix in [SNYK JS NOTEVIL 608878 (https://security.snyk.io/vuln/SNYK JS NOTEVIL 608878). This package has been deprecated.\nNone", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2022-33987", "package": "npm:got", "purl": "pkg:npm/got@8.3.2", "package_type": "npm", "package_usage": "optional", "version": "8.3.2", "fix_version": "11.8.5", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Got allows a redirect to a UNIX socket\nThe got package before 11.8.5 and 12.1.0 for Node.js allows a redirect to a UNIX socket.\nUpgrade to version 11.8.5 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-24033", "package": "npm:react-dev-utils", "purl": "pkg:npm/react-dev-utils@4.2.3", "package_type": "npm", "package_usage": "optional", "version": "4.2.3", "fix_version": "11.0.4", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# react dev utils OS Command Injection in function `getProcessForPort`\nreact dev utils prior to v11.0.4 exposes a function, `getProcessForPort`, where an input argument is concatenated into a command string to be executed. This function is typically used from react scripts (in Create React App projects), where the usage is safe. Only when this function is manually invoked with user provided values (ie: by custom code) is there the potential for command injection. If you're consuming it from react scripts then this issue does not affect you.\nUpgrade to version 11.0.4 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-28472", "package": "npm:aws-sdk", "purl": "pkg:npm/aws-sdk@2.1.40", "package_type": "npm", "package_usage": "optional", "version": "2.1.40", "fix_version": "2.814.0", "severity": "HIGH", "cvss_score": "7.3", "short_description": "# Prototype Pollution via file load in aws sdk and @aws sdk/shared ini file loader\nThis affects the package @aws sdk/shared ini file loader before 1.0.0 rc.9; the package aws sdk before 2.814.0. If an attacker submits a malicious INI file to an application that parses it with loadSharedConfigFiles , they will pollute the prototype on the application. This can be exploited further depending on the context.\nUpgrade to version 2.814.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-29078", "package": "npm:ejs", "purl": "pkg:npm/ejs@0.8.8", "package_type": "npm", "package_usage": "optional", "version": "0.8.8", "fix_version": "3.1.10", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# ejs template injection vulnerability\nThe ejs (aka Embedded JavaScript templates) package 3.1.6 for Node.js allows server side template injection in settings[view options [outputFunctionName . This is parsed as an internal option, and overwrites the outputFunctionName option with an arbitrary OS command (which is executed upon template compilation).\nUpgrade to version 3.1.7 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-8158", "package": "npm:typeorm", "purl": "pkg:npm/typeorm@0.2.24", "package_type": "npm", "package_usage": "optional", "version": "0.2.24", "fix_version": "0.3.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# TypeORM vulnerable to MAID and Prototype Pollution\nPrototype pollution vulnerability in the TypeORM package < 0.2.25 may allow attackers to add or modify Object properties leading to further denial of service or SQL injection attacks.\nUpgrade to version 0.2.25 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-23539", "package": "npm:jsonwebtoken", "purl": "pkg:npm/jsonwebtoken@0.1.0", "package_type": "npm", "package_usage": "required", "version": "0.1.0", "fix_version": "9.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# jsonwebtoken unrestricted key type could lead to legacy keys usage \n# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. \n\n# Am I affected?\n\nYou are affected if you are using an algorithm and a key type other than the combinations mentioned below\n\n| Key type |\talgorithm\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| ec\t\t\t\t\t | ES256, ES384, ES512\t\t\t\t\t\t\t\t\t\t\t|\n| rsa\t\t\t\t\t| RS256, RS384, RS512, PS256, PS384, PS512 |\n| rsa pss\t| PS256, PS384, PS512\t\t\t\t\t\t\t\t\t\t\t|\n\nAnd for Elliptic Curve algorithms:\n\n| `alg` | Curve\t\t\t|\n|\t\t\t |\t\t\t\t\t\t|\n| ES256 | prime256v1 |\n| ES384 | secp384r1\t|\n| ES512 | secp521r1\t|\n\n# How do I fix it?\n\nUpdate to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, If you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you\u2019ll need to set the `allowInvalidAsymmetricKeyTypes` option\tto `true` in the `sign()` and/or `verify()` functions.\n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you already use a valid secure combination of key type and algorithm. Otherwise,\tuse the\t`allowInvalidAsymmetricKeyTypes` option\tto `true` in the `sign()` and `verify()` functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility. \n\n\nUpgrade to version 9.0.0 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "CVE-2021-29059", "package": "npm:is-svg", "purl": "pkg:npm/is-svg@2.1.0", "package_type": "npm", "package_usage": "optional", "version": "2.1.0", "fix_version": "4.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ReDOS in IS SVG\nA vulnerability was discovered in IS SVG version 4.3.1 and below where a Regular Expression Denial of Service (ReDOS) occurs if the application is provided and checks a crafted invalid SVG string.\nUpgrade to version 4.3.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-29060", "package": "npm:color-string", "purl": "pkg:npm/color-string@1.9.1", "package_type": "npm", "package_usage": "optional", "version": "1.9.1", "fix_version": "1.5.5", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Regular Expression Denial of Service (ReDOS)\nIn the npm package `color string`, there is a\tReDos (Regular Expression Denial of Service) vulnerability regarding an exponential time complexity for\nlinearly increasing input lengths for `hwb()` color strings.\n\nStrings reaching more than 5000 characters would see several\nmilliseconds of processing time; strings reaching more than\n50,000 characters began seeing 1500ms (1.5s) of processing time.\n\nThe cause was due to a the regular expression that parses\nhwb() strings\t specifically, the hue value\t where\nthe integer portion of the hue value used a 0 or more quantifier\nshortly thereafter followed by a 1 or more quantifier.\n\nThis caused excessive backtracking and a cartesian scan,\nresulting in exponential time complexity given a linear\nincrease in input length.\nUpgrade to version 1.5.5 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-26540", "package": "npm:sanitize-html", "purl": "pkg:npm/sanitize-html@1.4.2", "package_type": "npm", "package_usage": "required", "version": "1.4.2", "fix_version": "2.12.1", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Improper Input Validation in sanitize html\nApostrophe Technologies sanitize html before 2.3.2 does not properly validate the hostnames set by the \"allowedIframeHostnames\" option when the \"allowIframeRelativeUrls\" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with \"/\texample.com\".\nUpgrade to version 2.3.2 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2020-15084", "package": "npm:express-jwt", "purl": "pkg:npm/express-jwt@0.1.3", "package_type": "npm", "package_usage": "required", "version": "0.1.3", "fix_version": "6.0.0", "severity": "HIGH", "cvss_score": "7.7", "short_description": "# Authorization bypass in express jwt\n### Overview\nVersions before and including 5.3.3, we are not enforcing the **algorithms** entry to be specified in the configuration.\nWhen **algorithms** is not specified in the configuration, with the combination of jwks rsa, it may lead to authorization bypass. \n\n### Am I affected?\nYou are affected by this vulnerability if all of the following conditions apply:\n\nYou are using express jwt\nAND \nYou do not have **algorithms**\tconfigured in your express jwt configuration.\nAND\nYou are using libraries such as jwks rsa as the **secret**. \n\n### How to fix that?\nSpecify **algorithms** in the express jwt configuration. The following is an example of a proper configuration\n\n``` \nconst checkJwt = jwt({\n\tsecret: jwksRsa.expressJwtSecret({\n\t\trateLimit: true,\n\t\tjwksRequestsPerMinute: 5,\n\t\tjwksUri: `https://${DOMAIN}/.well known/jwks.json`\n\t}),\n\t// Validate the audience and the issuer.\n\taudience: process.env.AUDIENCE,\n\tissuer: `https://${DOMAIN}/`,\n\t// restrict allowed algorithms\n\talgorithms: ['RS256' \n}); \n```\n\n### Will this update impact my users?\nThe fix provided in patch will not affect your users if you specified the algorithms allowed. The patch now makes **algorithms** a required configuration. \n\n\n### Credit\nIST Group\nUpgrade to version 6.0.0 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2015-8851", "package": "npm:node-uuid", "purl": "pkg:npm/node-uuid@1.4.8", "package_type": "npm", "package_usage": "optional", "version": "1.4.8", "fix_version": "1.4.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Insecure Entropy Source\t Math.random() in node uuid\nAffected versions of `node uuid` consistently fall back to using `Math.random` as an entropy source instead of `crypto`, which may result in guessable UUID's.\n\n\n\n## Recommendation\n\nUpdate to version 1.4.4 or later.\nUpgrade to version 1.4.4 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2016-1000237", "package": "npm:sanitize-html", "purl": "pkg:npm/sanitize-html@1.4.2", "package_type": "npm", "package_usage": "required", "version": "1.4.2", "fix_version": "1.4.3", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# Cross Site Scripting in sanitize html\nAffected versions of `sanitize html` do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript.\n\n\n## Recommendation\n\nUpdate to version 1.4.3 or later.\nUpgrade to version 1.4.3 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2015-9235", "package": "npm:jsonwebtoken", "purl": "pkg:npm/jsonwebtoken@0.1.0", "package_type": "npm", "package_usage": "required", "version": "0.1.0", "fix_version": "4.2.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Verification Bypass in jsonwebtoken\nVersions 4.2.1 and earlier of `jsonwebtoken` are affected by a verification bypass vulnerability. This is a result of weak validation of the JWT algorithm type, occuring when an attacker is allowed to arbitrarily specify the JWT algorithm.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.2.2 or later.\nUpgrade to version 4.2.2 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "CVE-2022-23541", "package": "npm:jsonwebtoken", "purl": "pkg:npm/jsonwebtoken@0.1.0", "package_type": "npm", "package_usage": "required", "version": "0.1.0", "fix_version": "9.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# jsonwebtoken's insecure implementation of key retrieval function could lead to Forgeable Public/Private Tokens from RSA to HMAC\n# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function (referring to the `secretOrPublicKey` argument from the [readme link (https://github.com/auth0/node jsonwebtoken#jwtverifytoken secretorpublickey options callback)) will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification\tthan the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. \n\n# Am I affected?\n\nYou will be affected if your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function. \n\n# How do I fix it?\n \nUpdate to version 9.0.0.\n\n# Will the fix impact my users?\n\nThere is no impact for end users\nUpgrade to version 9.0.0 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "NPM-1091665", "package": "npm:marked", "purl": "pkg:npm/marked@0.4.0", "package_type": "npm", "package_usage": "optional", "version": "0.4.0", "fix_version": "0.7.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service in marked\nAffected versions of `marked` are vulnerable to Regular Expression Denial of Service (ReDoS). The `_label` subrule may significantly degrade parsing performance of malformed input.\n\n\n## Recommendation\n\nUpgrade to version 0.7.0 or later.\nUpgrade to version 0.7.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2016-2515", "package": "npm:hawk", "purl": "pkg:npm/hawk@1.1.1", "package_type": "npm", "package_usage": "optional", "version": "1.1.1", "fix_version": "3.1.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in hawk\nVersions of `hawk` prior to 3.1.3, or 4.x prior to 4.1.1 are affected by a regular expression denial of service vulnerability related to excessively long headers and URI's.\n\n\n\n## Recommendation\n\nUpdate to hawk version 4.1.1 or later.\nUpgrade to version 3.1.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-26539", "package": "npm:sanitize-html", "purl": "pkg:npm/sanitize-html@1.4.2", "package_type": "npm", "package_usage": "required", "version": "1.4.2", "fix_version": "2.12.1", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Improper Input Validation in sanitize html\nApostrophe Technologies sanitize html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the \"allowedIframeHostnames\" option.\nUpgrade to version 2.3.1 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "NPM-1091792", "package": "npm:base64url", "purl": "pkg:npm/base64url@0.0.6", "package_type": "npm", "package_usage": "optional", "version": "0.0.6", "fix_version": "3.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read in base64url\nVersions of `base64url` before 3.0.0 are vulnerable to to out of bounds reads as it allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.\n\n\n## Recommendation\n\nUpdate to version 3.0.0 or later.\nUpgrade to version 3.0.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2019-2391", "package": "npm:bson", "purl": "pkg:npm/bson@0.4.23", "package_type": "npm", "package_usage": "optional", "version": "0.4.23", "fix_version": "1.1.4", "severity": "MEDIUM", "cvss_score": "5.4", "short_description": "# Deserialization of Untrusted Data in bson\nIncorrect parsing of certain JSON input may result in js bson not correctly serializing BSON. This may cause unexpected application behaviour including data disclosure.\nUpgrade to version 1.1.4 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-23540", "package": "npm:jsonwebtoken", "purl": "pkg:npm/jsonwebtoken@0.1.0", "package_type": "npm", "package_usage": "required", "version": "0.1.0", "fix_version": "9.0.0", "severity": "MEDIUM", "cvss_score": "6.4", "short_description": "# jsonwebtoken vulnerable to signature validation bypass due to insecure default algorithm in jwt.verify()\n# Overview\n\nIn versions <=8.5.1 of jsonwebtoken library, lack of algorithm definition and a falsy secret or key in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification.\n\n# Am I affected?\nYou will be affected if all the following are true in the `jwt.verify()` function:\n\ta token with no signature is received\n\tno algorithms are specified \n\ta falsy (e.g. null, false, undefined) secret or key is passed \n\n# How do I fix it?\n \nUpdate to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method. \n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you don\u2019t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.\n\nUpgrade to version 9.0.0 or later", "related_urls": [], "occurrence_count": 7, "reachable_flows": 0}
{"id": "CVE-2020-13110", "package": "npm:kerberos", "purl": "pkg:npm/kerberos@0.0.24", "package_type": "npm", "package_usage": "optional", "version": "0.0.24", "fix_version": "1.0.0", "severity": "HIGH", "cvss_score": "7.8", "short_description": "# DLL Injection in kerberos\nVersion of `kerberos` prior to 1.0.0 are vulnerable to DLL Injection. The package loads DLLs without specifying a full path. This may allow attackers to create a file with the same name in a folder that precedes the intended file in the DLL path search. Doing so would allow attackers to execute arbitrary code in the machine.\n\n\n## Recommendation\n\nUpgrade to version 1.0.0 or later.\nUpgrade to version 1.0.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-16490", "package": "npm:mpath", "purl": "pkg:npm/mpath@0.1.1", "package_type": "npm", "package_usage": "optional", "version": "0.1.1", "fix_version": "0.8.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in mpath\nVersions of `mpath` before 0.5.1 are vulnerable to prototype pollution. Provided certain input `mpath` can add or modify properties of the `Object` prototype. These properties will be present on all objects.\n\n\n## Recommendation\n\nUpdate to version `0.5.1` or later.\nUpgrade to version 0.5.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-1000228", "package": "npm:ejs", "purl": "pkg:npm/ejs@0.8.8", "package_type": "npm", "package_usage": "optional", "version": "0.8.8", "fix_version": "2.5.5", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# ejs is vulnerable to remote code execution due to weak input validation\nnodejs ejs versions older than 2.5.3 is vulnerable to remote code execution due to weak input validation in `ejs.renderFile()` function\nUpgrade to version 2.5.5 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-1000189", "package": "npm:ejs", "purl": "pkg:npm/ejs@0.8.8", "package_type": "npm", "package_usage": "optional", "version": "0.8.8", "fix_version": "2.5.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ejs vulnerable to DoS due to weak input validation\nnodejs ejs version older than 2.5.5 is vulnerable to a denial of service due to weak input validation in `ejs.renderFile()`\nUpgrade to version 2.5.5 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-1000188", "package": "npm:ejs", "purl": "pkg:npm/ejs@0.8.8", "package_type": "npm", "package_usage": "optional", "version": "0.8.8", "fix_version": "2.5.5", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# mde ejs vulnerable to XSS\nnodejs ejs version older than 2.5.5 is vulnerable to a Cross site scripting in the `ejs.renderFile()` resulting in code injection\nUpgrade to version 2.5.5 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-16016", "package": "npm:sanitize-html", "purl": "pkg:npm/sanitize-html@1.4.2", "package_type": "npm", "package_usage": "required", "version": "1.4.2", "fix_version": "1.11.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Cross Site Scripting in sanitize html\nAffected versions of `sanitize html` are vulnerable to cross site scripting when allowedTags includes at least one `nonTextTag`.\n\n## Proof of Concept\n\n```js\nvar sanitizeHtml = require('sanitize html');\n\nvar dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';\nvar clean = sanitizeHtml(dirty, {\n\t\tallowedTags: [ 'textarea'\t\n});\n\nconsole.log(clean);\n\n// !<textarea></textarea><svg/onload=prompt`xs`></textarea>!\n```\n\n\n## Recommendation\n\nUpdate to version 1.11.4 or later.\nUpgrade to version 1.11.4 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2017-16138", "package": "npm:mime", "purl": "pkg:npm/mime@1.2.11", "package_type": "npm", "package_usage": "optional", "version": "1.2.11", "fix_version": "1.4.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# mime Regular Expression Denial of Service when MIME lookup performed on untrusted user input\nAffected versions of `mime` are vulnerable to regular expression denial of service when a mime lookup is performed on untrusted user input.\n\n\n## Recommendation\n\nUpdate to version 2.0.3 or later.\nUpgrade to version 1.4.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-3728", "package": "npm:hoek", "purl": "pkg:npm/hoek@0.9.1", "package_type": "npm", "package_usage": "optional", "version": "0.9.1", "fix_version": "4.2.1", "severity": "HIGH", "cvss_score": "8.8", "short_description": "# Prototype Pollution in hoek\nVersions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.\n\n\n## Recommendation\n\nUpdate to version 4.2.1, 5.0.3 or later.\nUpgrade to version 4.2.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-28092", "package": "npm:is-svg", "purl": "pkg:npm/is-svg@2.1.0", "package_type": "npm", "package_usage": "optional", "version": "2.1.0", "fix_version": "4.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS)\nThe is svg package 2.1.0 through 4.2.1 for Node.js uses a regular expression that is vulnerable to Regular Expression Denial of Service (ReDoS). If an attacker provides a malicious string, is svg will get stuck processing the input.\nUpgrade to version 4.2.2 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-4231", "package": "npm:@angular/core", "purl": "npm:@angular/core", "package_type": "npm", "package_usage": "N/A", "version": null, "fix_version": "10.2.5", "severity": "MEDIUM", "cvss_score": "5.4", "short_description": "# Cross site scripting in Angular\nA vulnerability was found in Angular up to 11.0.4/11.1.0 next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 10.2.5, 11.0.5 or 11.1.0 next.3 is advised to to address this issue.\nUpgrade to version 10.2.5 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-20162", "package": "npm:ms", "purl": "pkg:npm/ms@2.0.0", "package_type": "npm", "package_usage": "optional", "version": "2.0.0", "fix_version": "2.0.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Vercel ms Inefficient Regular Expression Complexity vulnerability\nA vulnerability, which was classified as problematic, has been found in vercel ms up to 1.x. This issue affects the function parse of the file index.js. The manipulation of the argument str leads to inefficient regular expression complexity. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 2.0.0 is able to address this issue. The name of the patch is caae2988ba2a37765d055c4eee63d383320ee662. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB 217451.\nUpgrade to version 2.0.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-16487", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.11", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.11 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.11 or later.\nUpgrade to version 4.17.11 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2020-28500", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.21", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions. \n\nSteps to reproduce (provided by reporter Liyuan Chen):\n```js\nvar lo = require('lodash');\n\nfunction build_blank(n) {\n\t\tvar ret = \"1\"\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tret += \" \"\n\t\t}\n\t\treturn ret + \"1\";\n}\nvar s = build_blank(50000) var time0 = Date.now();\nlo.trim(s) \nvar time_cost0 = Date.now()\t time0;\nconsole.log(\"time_cost0: \" + time_cost0);\nvar time1 = Date.now();\nlo.toNumber(s) var time_cost1 = Date.now()\t time1;\nconsole.log(\"time_cost1: \" + time_cost1);\nvar time2 = Date.now();\nlo.trimEnd(s);\nvar time_cost2 = Date.now()\t time2;\nconsole.log(\"time_cost2: \" + time_cost2);\n```\nUpgrade to version 4.17.21 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2023-44270", "package": "npm:postcss", "purl": "pkg:npm/postcss@6.0.23", "package_type": "npm", "package_usage": "optional", "version": "6.0.23", "fix_version": "8.4.31", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# PostCSS line return parsing error\nAn issue was discovered in PostCSS before 8.4.31. It affects linters using PostCSS to parse external Cascading Style Sheets (CSS). There may be ` r` discrepancies, as demonstrated by `@font face{ font:( r/*);}` in a rule.\n\nThis vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being originally included in a comment.\nUpgrade to version 8.4.31 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-37466", "package": "npm:vm2", "purl": "pkg:npm/vm2@3.9.17", "package_type": "npm", "package_usage": "optional", "version": "3.9.17", "fix_version": "3.9.18", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# vm2 Sandbox Escape vulnerability\nIn vm2 for versions up to 3.9.19, `Promise` handler sanitization can be bypassed, allowing attackers to escape the sandbox and run arbitrary code.\n\n### Impact\nRemote Code Execution, assuming the attacker has arbitrary code execution primitive inside the context of vm2 sandbox.\n\n### Patches\nNone.\n\n### Workarounds\nNone.\n\n### References\nPoC\t https://gist.github.com/leesh3288/f693061e6523c97274ad5298eb2c74e9\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n\tOpen an issue in [VM2 (https://github.com/patriksimek/vm2)\n\nThanks to [Xion (https://twitter.com/0x10n) (SeungHyun Lee) of [KAIST Hacking Lab (https://kaist hacking.github.io/) for disclosing this vulnerability.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-32314", "package": "npm:vm2", "purl": "pkg:npm/vm2@3.9.17", "package_type": "npm", "package_usage": "optional", "version": "3.9.17", "fix_version": "3.9.18", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# vm2 Sandbox Escape vulnerability\nA sandbox escape vulnerability exists in vm2 for versions up to 3.9.17. It abuses an unexpected creation of a host object based on the specification of `Proxy`.\n\n### Impact\nA threat actor can bypass the sandbox protections to gain remote code execution rights on the host running the sandbox.\n\n### Patches\nThis vulnerability was patched in the release of version `3.9.18` of `vm2`.\n\n### Workarounds\nNone.\n\n### References\nPoC\t https://gist.github.com/arkark/e9f5cf5782dec8321095be3e52acf5ac\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n\tOpen an issue in [VM2 (https://github.com/patriksimek/vm2)\n\nThanks to @arkark (Takeshi Kaneko) of GMO Cybersecurity by Ierae, Inc. for disclosing this vulnerability.\nUpgrade to version 3.9.18 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-32313", "package": "npm:vm2", "purl": "pkg:npm/vm2@3.9.17", "package_type": "npm", "package_usage": "optional", "version": "3.9.17", "fix_version": "3.9.18", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# vm2 vulnerable to Inspect Manipulation\nIn versions 3.9.17 and lower of vm2 it was possible to get a read write reference to the node `inspect` method and edit options for `console.log`.\n\n### Impact\nA threat actor can edit options for `console.log`.\n\n### Patches\nThis vulnerability was patched in the release of version `3.9.18` of `vm2`.\n\n### Workarounds\nAfter creating a vm make the `inspect` method readonly with `vm.readonly(inspect)`.\n\n### References\nPoC\t https://gist.github.com/arkark/c1c57eaf3e0a649af1a70c2b93b17550\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n\tOpen an issue in [VM2 (https://github.com/patriksimek/vm2)\n\nThanks to @arkark (Takeshi Kaneko) of GMO Cybersecurity by Ierae, Inc. for disclosing this vulnerability.\nUpgrade to version 3.9.18 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-37903", "package": "npm:vm2", "purl": "pkg:npm/vm2@3.9.17", "package_type": "npm", "package_usage": "optional", "version": "3.9.17", "fix_version": "3.9.18", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# vm2 Sandbox Escape vulnerability\nIn vm2 for versions up to 3.9.19, Node.js custom inspect function allows attackers to escape the sandbox and run arbitrary code.\n\n### Impact\nRemote Code Execution, assuming the attacker has arbitrary code execution primitive inside the context of vm2 sandbox.\n\n### Patches\nNone.\n\n### Workarounds\nNone.\n\n### References\nPoC is to be disclosed on or after the 5th of September.\n\n### Similarity with [CVE 2023 37466 (https://nvd.nist.gov/vuln/detail/CVE 2023 37466)\nWhile this advisory might look similar to [CVE 2023 37466 (https://nvd.nist.gov/vuln/detail/CVE 2023 37466), it is a completely different way of escaping the sandbox.\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n\tOpen an issue in [VM2 (https://github.com/patriksimek/vm2)\n\nThanks to [Xion (https://twitter.com/0x10n) (SeungHyun Lee) of [KAIST Hacking Lab (https://kaist hacking.github.io/) for disclosing this vulnerability.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-7610", "package": "npm:bson", "purl": "pkg:npm/bson@0.4.23", "package_type": "npm", "package_usage": "optional", "version": "0.4.23", "fix_version": "1.1.4", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Deserialization of Untrusted Data in bson\nAll versions of bson before 1.1.4 are vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's _bsontype, leading to cases where an object is serialized as a document rather than the intended BSON type.\nUpgrade to version 1.1.4 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23424", "package": "npm:ansi-html", "purl": "pkg:npm/ansi-html@0.0.7", "package_type": "npm", "package_usage": "optional", "version": "0.0.7", "fix_version": "0.0.8", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in ansi html\nThis affects all versions of package ansi html. If an attacker provides a malicious string, it will get stuck processing the input for an extremely long time.\nUpgrade to version 0.0.8 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-1650", "package": "npm:eventsource", "purl": "pkg:npm/eventsource@0.1.6", "package_type": "npm", "package_usage": "optional", "version": "0.1.6", "fix_version": "1.1.1", "severity": "CRITICAL", "cvss_score": "9.3", "short_description": "# Exposure of Sensitive Information in eventsource\nWhen fetching an url with a link to an external site (Redirect), the users Cookies & Autorisation headers are leaked to the third party application. According to the same origin policy, the header should be \"sanitized.\"\nUpgrade to version 1.1.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-21680", "package": "npm:marked", "purl": "pkg:npm/marked@0.4.0", "package_type": "npm", "package_usage": "optional", "version": "0.4.0", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `block.def` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from \"marked\";\n\nmarked.parse(`[x :${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n\thttps://marked.js.org/using_advanced#workers\n\thttps://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-21681", "package": "npm:marked", "purl": "pkg:npm/marked@0.4.0", "package_type": "npm", "package_usage": "optional", "version": "0.4.0", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from 'marked';\n\nconsole.log(marked.parse(`[x : x\n\n\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (\t[\t (`));\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n\thttps://marked.js.org/using_advanced#workers\n\thttps://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-29167", "package": "npm:hawk", "purl": "pkg:npm/hawk@1.1.1", "package_type": "npm", "package_usage": "optional", "version": "1.1.1", "fix_version": "9.0.1", "severity": "HIGH", "cvss_score": "7.4", "short_description": "# Uncontrolled Resource Consumption in Hawk\nHawk is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Hawk used a regular expression to parse `Host` HTTP header (`Hawk.utils.parseHost()`), which was subject to regular expression DoS attack\t meaning each added character in the attacker's input increases the computation time exponentially. `parseHost()` was patched in `9.0.1` to use built in `URL` class to parse hostname instead.`Hawk.authenticate()` accepts `options` argument. If that contains `host` and `port`, those would be used instead of a call to `utils.parseHost()`.\nUpgrade to version 9.0.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23438", "package": "npm:mpath", "purl": "pkg:npm/mpath@0.1.1", "package_type": "npm", "package_usage": "optional", "version": "0.1.1", "fix_version": "0.8.4", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Type confusion in mpath\nThis affects the package mpath before 0.8.4. A type confusion vulnerability can lead to a bypass of CVE 2018 16490. In particular, the condition `ignoreProperties.indexOf(parts[i ) !==\t1` returns ` 1` if `parts[i ` is `['__proto__' `. This is because the method that has been called if the input is an array is `Array.prototype.indexOf()` and not `String.prototype.indexOf()`. They behave differently depending on the type of the input.\nUpgrade to version 0.8.4 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2019-17426", "package": "npm:mongoose", "purl": "pkg:npm/mongoose@4.2.4", "package_type": "npm", "package_usage": "optional", "version": "4.2.4", "fix_version": "4.13.21", "severity": "CRITICAL", "cvss_score": "9.1", "short_description": "# Improper Input Validation in Automattic Mongoose\nAutomattic Mongoose through 5.7.4 allows attackers to bypass access control (in some applications) because any query object with a `_bsontype` attribute is ignored. For example, adding `\"_bsontype\":\"a\"` can sometimes interfere with a query filter. NOTE: this CVE is about Mongoose's failure to work around this _bsontype special case that exists in older versions of the bson parser (aka the mongodb/js bson project).\nUpgrade to version 4.13.21 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-2564", "package": "npm:mongoose", "purl": "pkg:npm/mongoose@4.2.4", "package_type": "npm", "package_usage": "optional", "version": "4.2.4", "fix_version": "5.13.20", "severity": "HIGH", "cvss_score": "7.0", "short_description": "# automattic/mongoose vulnerable to Prototype pollution via Schema.path\nMongoose is a MongoDB object modeling tool designed to work in an asynchronous environment. Affected versions of this package are vulnerable to Prototype Pollution. The `Schema.path()` function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.\nUpgrade to version 5.13.15 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-3696", "package": "npm:mongoose", "purl": "pkg:npm/mongoose@4.2.4", "package_type": "npm", "package_usage": "optional", "version": "4.2.4", "fix_version": "5.13.20", "severity": "CRITICAL", "cvss_score": "10.0", "short_description": "# Mongoose Prototype Pollution vulnerability\nPrototype Pollution in GitHub repository automattic/mongoose prior to 7.3.3, 6.11.3, and 5.13.20.\nUpgrade to version 5.13.20 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23358", "package": "npm:underscore", "purl": "pkg:npm/underscore@1.4.4", "package_type": "npm", "package_usage": "optional", "version": "1.4.4", "fix_version": "1.12.1", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Arbitrary Code Execution in underscore\nThe package `underscore` from 1.13.0 0 and before 1.13.0 2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Execution via the template function, particularly when a variable property is passed as an argument as it is not sanitized.\nUpgrade to version 1.12.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "NPM-1095195", "package": "npm:mongoose", "purl": "pkg:npm/mongoose@4.2.4", "package_type": "npm", "package_usage": "optional", "version": "4.2.4", "fix_version": "4.3.6", "severity": "MEDIUM", "cvss_score": "5.1", "short_description": "# Remote Memory Exposure in mongoose\nVersions of `mongoose` before 4.3.6, 3.8.39 are vulnerable to remote memory exposure.\n\nTrying to save a number to a field of type Buffer on the affected mongoose versions allocates a chunk of uninitialized memory and stores it in the database.\n\n\n## Recommendation\n\nUpdate to version 4.3.6, 3.8.39 or later.\nUpgrade to version 4.3.6 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-8203", "package": "npm:lodash.set", "purl": "pkg:npm/lodash.set@4.3.2", "package_type": "npm", "package_usage": "optional", "version": "4.3.2", "fix_version": null, "severity": "HIGH", "cvss_score": "7.4", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The functions `pick`, `set`, `setWith`, `update`, `updateWith`, and `zipObjectDeep` allow a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires manipulating objects based on user provided property values or arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-8203", "package": "npm:lodash.pick", "purl": "pkg:npm/lodash.pick@4.4.0", "package_type": "npm", "package_usage": "optional", "version": "4.4.0", "fix_version": null, "severity": "HIGH", "cvss_score": "7.4", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The functions `pick`, `set`, `setWith`, `update`, `updateWith`, and `zipObjectDeep` allow a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires manipulating objects based on user provided property values or arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-46233", "package": "npm:crypto-js", "purl": "pkg:npm/crypto-js@3.3.0", "package_type": "npm", "package_usage": "optional", "version": "3.3.0", "fix_version": "4.2.0", "severity": "CRITICAL", "cvss_score": "9.1", "short_description": "# crypto js PBKDF2 1,000 times weaker than specified in 1993 and 1.3M times weaker than current standard\n### Impact\n#### Summary\nCrypto js PBKDF2 is 1,000 times weaker than originally specified in 1993, and [at least 1,300,000 times weaker than current industry standard [OWASP PBKDF2 Cheatsheet . This is because it both (1) defaults to [SHA1 [SHA1 wiki , a cryptographic hash algorithm considered insecure [since at least 2005 [Cryptanalysis of SHA 1\tand (2) defaults to [one single iteration [one iteration src , a 'strength' or 'difficulty' value specified at 1,000 when specified in 1993. PBKDF2 relies on iteration count as a countermeasure to [preimage [preimage attack\tand [collision [collision attack\tattacks.\n\nPotential Impact:\n\n1. If used to protect passwords, the impact is high.\n2. If used to generate signatures, the impact is high.\n\nProbability / risk analysis / attack enumeration:\n\n1. [For at most $45,000 [SHA1 is a Shambles , an attacker, given control of only the beginning of a crypto js PBKDF2 input, can create a value which has _identical cryptographic signature_ to any chosen known value.\n4. Due to the [length extension attack\ton SHA1, we can create a value that has identical signature to any _unknown_ value, provided it is prefixed by a known value. It does not matter if PBKDF2 applies '[salt [cryptographic salt ' or '[pepper [cryptographic pepper ' or any other secret unknown to the attacker. It will still create an identical signature.\n\nUpdate: PBKDF2 requires a pseudo random function that takes two inputs, so HMAC SHA1 is used rather than plain SHA1. HMAC is not affected by [length extension attacks [Length Extension attack . However, by defaulting to a single PBKDF2 iteration, the hashes do not benefit from the extra computational complexity that PBKDF2 is supposed to provide. The resulting hashes therefore have little protection against an offline brute force attack.\n \n[cryptographic salt : https://en.wikipedia.org/wiki/Salt_(cryptography) \"Salt (cryptography), Wikipedia\"\n[cryptographic pepper : https://en.wikipedia.org/wiki/Pepper_(cryptography) \"Pepper (cryptography), Wikipedia\"\n[SHA1 wiki : https://en.wikipedia.org/wiki/SHA 1 \"SHA 1, Wikipedia\"\n[Cryptanalysis of SHA 1 : https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html \"Cryptanalysis of SHA 1\"\n[one iteration src : https://github.com/brix/crypto js/blob/1da3dabf93f0a0435c47627d6f171ad25f452012/src/pbkdf2.js#L22 L26 \"crypto js/src/pbkdf2.js lines 22 26\"\n[collision attack : https://en.wikipedia.org/wiki/Hash_collision \"Collision Attack, Wikipedia\"\n[preimage attack : https://en.wikipedia.org/wiki/Preimage_attack \"Preimage Attack, Wikipedia\"\n[SHA1 is a Shambles : https://eprint.iacr.org/2020/014.pdf \"SHA 1 is a Shambles: First Chosen Prefix Collision on SHA 1\nand Application to the PGP Web of Trust, Ga\u00ebtan Leurent and Thomas Peyrin\"\n[Length Extension attack : https://en.wikipedia.org/wiki/Length_extension_attack \"Length extension attack, Wikipedia\"\n\ncrypto js has 10,642 public users [as displayed on NPM [crypto js, NPM , today October 11th 2023. The number of transient dependents is likely several orders of magnitude higher.\n\nA very rough GitHub search[ shows 432 files [GitHub search: affected files\tcross GitHub using PBKDF2 in crypto js in Typescript or JavaScript, but not specifying any number of iterations.\n\n[OWASP PBKDF2 Cheatsheet : https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pbkdf2 \"OWASP PBKDF2 Cheatsheet\"\n[crypto js, NPM : https://www.npmjs.com/package/crypto js \"crypto js on NPM\"\n[GitHub search: affected files : https://github.com/search?q=%22crypto js%22+AND+pbkdf2+AND+%28lang%3AJavaScript+OR+lang%3ATypeScript%29++NOT+%22iterations%22&type=code&p=2 \"GitHub search: crypto js AND pbkdf2 AND (lang:JavaScript OR lang:TypeScript)\tNOT iterations\"\n\n#### Affected versions\nAll versions are impacted. This code has been the same since crypto js was first created.\n\n#### Further Cryptanalysis\n\nThe issue here is especially egregious because the length extension attack makes useless any secret that might be appended to the plaintext before calculating its signature.\n\nConsider a scheme in which a secret is created for a user's username, and that secret is used to protect e.g. their passwords. Let's say that password is 'fake password', and their username is 'example username'.\n\nTo encrypt the user password via symmetric encryption we might do `encrypt(plaintext: 'fake password', encryption_key: cryptojs.pbkdf2(value: 'example username' + salt_or_pepper))`. By this means, we would, in theory, create an `encryption_key` that can be determined from the public username, but which requires the secret `salt_or_pepper` to generate. This is a common scheme for protecting passwords, as exemplified in bcrypt & scrypt. Because the encryption key is symmetric, we can use this derived key to also decrypt the ciphertext.\n\nBecause of the length extension issue, if the attacker obtains (via attack 1), a collision with 'example username', the attacker _does not need to know_ `salt_or_pepper` to decrypt their account data, only their public username.\n\n### Description\n\nPBKDF2 is a key derivation is a key derivation function that is used for two main purposes: (1) to stretch or squash a variable length password's entropy into a fixed size for consumption by another cryptographic operation and (2) to reduce the chance of downstream operations recovering the password input (for example, for password storage).\n\nUnlike the modern [webcrypto (https://w3c.github.io/webcrypto/#pbkdf2 operations) standard, crypto js does not throw an error when a number of iterations is not specified, and defaults to one single iteration. In the year 2000, when PBKDF2 was originally specified, the minimum number of iterations suggested was set at 1,000. Today, [OWASP recommends 1,300,000 [OWASP PBKDF2 Cheatsheet :\n\nhttps://github.com/brix/crypto js/blob/4dcaa7afd08f48cd285463b8f9499cdb242605fa/src/pbkdf2.js#L22 L26\n\n### Patches\nNo available patch. The package is not maintained.\n\n### Workarounds\nConsult the [OWASP PBKDF2 Cheatsheet . Configure to use SHA256 with at least 250,000 iterations.\n\n### Coordinated disclosure\nThis issue was simultaneously submitted to [crypto js (https://github.com/brix/crypto js) and [crypto es (https://github.com/entronad/crypto es) on the 23rd of October 2023.\n\n### Caveats\n\nThis issue was found in a security review that was _not_ scoped to crypto js. This report is not an indication that crypto js has undergone a formal security assessment by the author.\n\n\nUpgrade to version 4.2.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-42740", "package": "npm:shell-quote", "purl": "pkg:npm/shell-quote@1.6.1", "package_type": "npm", "package_usage": "optional", "version": "1.6.1", "fix_version": "1.7.3", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Improper Neutralization of Special Elements used in a Command in Shell quote\nThe shell quote package before 1.7.3 for Node.js allows command injection. An attacker can inject unescaped shell metacharacters through a regex designed to support Windows drive letters. If the output of this package is passed to a real shell as a quoted argument to a command with `exec()`, an attacker can inject arbitrary commands. This is because the Windows drive letter regex character class is `[A z ` instead of the correct `[A Za z `. Several shell metacharacters exist in the space between capital letter Z and lower case letter a, such as the backtick character.\nUpgrade to version 1.7.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-36604", "package": "npm:hoek", "purl": "pkg:npm/hoek@0.9.1", "package_type": "npm", "package_usage": "optional", "version": "0.9.1", "fix_version": "4.2.1", "severity": "HIGH", "cvss_score": "8.1", "short_description": "# hoek subject to prototype pollution via the clone function.\nhoek versions prior to 8.5.1, and 9.x prior to 9.0.3 are vulnerable to prototype pollution in the clone function. If an object with the __proto__ key is passed to clone() the key is converted to a prototype. This issue has been patched in version 9.0.3, and backported to 8.5.1. \nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-7598", "package": "npm:minimist", "purl": "pkg:npm/minimist@1.2.8", "package_type": "npm", "package_usage": "optional", "version": "1.2.8", "fix_version": "1.2.3", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Prototype Pollution in minimist\nAffected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.\t\nParsing the argument `\t__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `\t__proto__=Polluted` raises and uncaught error and crashes the application.\t\nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n\n\n## Recommendation\n\nUpgrade to versions 0.2.1, 1.2.3 or later.\nUpgrade to version 1.2.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-44906", "package": "npm:minimist", "purl": "pkg:npm/minimist@1.2.8", "package_type": "npm", "package_usage": "optional", "version": "1.2.8", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Prototype Pollution in minimist\nMinimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file `index.js`, function `setKey()` (lines 69 95).\nUpgrade to version 1.2.6 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-21501", "package": "npm:sanitize-html", "purl": "pkg:npm/sanitize-html@1.4.2", "package_type": "npm", "package_usage": "required", "version": "1.4.2", "fix_version": "2.12.1", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# sanitize html Information Exposure vulnerability\nVersions of the package sanitize html before 2.12.1 are vulnerable to Information Exposure when used on the backend and with the style attribute allowed, allowing enumeration of files in the system (including project dependencies). An attacker could exploit this vulnerability to gather details about the file system structure and dependencies of the targeted server.\nUpgrade to version 2.12.1 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2023-26136", "package": "npm:tough-cookie", "purl": "pkg:npm/tough-cookie@4.1.4", "package_type": "npm", "package_usage": "optional", "version": "4.1.4", "fix_version": "4.1.3", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# tough cookie Prototype Pollution vulnerability\nVersions of the package tough cookie before 4.1.3 are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. This issue arises from the manner in which the objects are initialized.\nUpgrade to version 4.1.3 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-0842", "package": "npm:xml2js", "purl": "pkg:npm/xml2js@0.2.8", "package_type": "npm", "package_usage": "optional", "version": "0.2.8", "fix_version": "0.5.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# xml2js is vulnerable to prototype pollution\nxml2js versions before 0.5.0 allows an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the `__proto__` property to be edited.\nUpgrade to version 0.5.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-28155", "package": "npm:request", "purl": "pkg:npm/request@2.45.0", "package_type": "npm", "package_usage": "required", "version": "2.45.0", "fix_version": "2.68.0", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# Server Side Request Forgery in Request\nThe `request` package through 2.88.2 for Node.js and the `@cypress/request` package prior to 3.0.0 allow a bypass of SSRF mitigations via an attacker controller server that does a cross protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\n\nNOTE: The `request` package is no longer supported by the maintainer.\nNone", "related_urls": [], "occurrence_count": 5, "reachable_flows": 0}
{"id": "CVE-2022-33171", "package": "npm:typeorm", "purl": "pkg:npm/typeorm@0.2.24", "package_type": "npm", "package_usage": "optional", "version": "0.2.24", "fix_version": "0.3.0", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# SQL injection in typeORM\nThe findOne function in TypeORM before 0.3.0 can either be supplied with a string or a FindOneOptions object. When input to the function is a user controlled parsed JSON object, supplying a crafted FindOneOptions instead of an id string leads to SQL injection. NOTE: the vendor's position is that the user's application is responsible for input validation.\nUpgrade to version 0.3.0 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45133", "package": "npm:babel-traverse", "purl": "pkg:npm/babel-traverse@6.26.0", "package_type": "npm", "package_usage": "optional", "version": "6.26.0", "fix_version": null, "severity": "CRITICAL", "cvss_score": "9.4", "short_description": "# Babel vulnerable to arbitrary code execution when compiling specifically crafted malicious code\n### Impact\n\nUsing Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods.\n\nKnown affected plugins are:\n\t`@babel/plugin transform runtime`\n\t`@babel/preset env` when using its [`useBuiltIns` (https://babeljs.io/docs/babel preset env#usebuiltins) option\n\tAny \"polyfill provider\" plugin that depends on `@babel/helper define polyfill provider`, such as `babel plugin polyfill corejs3`, `babel plugin polyfill corejs2`, `babel plugin polyfill es shims`, `babel plugin polyfill regenerator`\n\nNo other plugins under the `@babel/` namespace are impacted, but third party plugins might be.\n\n**Users that only compile trusted code are not impacted.**\n\n### Patches\n\nThe vulnerability has been fixed in `@babel/traverse@7.23.2`.\n\nBabel 6 does not receive security fixes anymore (see [Babel's security policy (https://github.com/babel/babel/security/policy)), hence there is no patch planned for `babel traverse@6`.\n\n### Workarounds\n\n\tUpgrade `@babel/traverse` to v7.23.2 or higher. You can do this by deleting it from your package manager's lockfile and re installing the dependencies. `@babel/core` >=7.23.2 will automatically pull in a non vulnerable version.\n\tIf you cannot upgrade `@babel/traverse` and are using one of the affected packages mentioned above, upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel/traverse` versions:\n\t\t`@babel/plugin transform runtime` v7.23.2\n\t\t`@babel/preset env` v7.23.2\n\t\t`@babel/helper define polyfill provider` v0.4.3\n\t\t`babel plugin polyfill corejs2` v0.4.6\n\t\t`babel plugin polyfill corejs3` v0.8.5\n\t\t`babel plugin polyfill es shims` v0.10.0\n\t\t`babel plugin polyfill regenerator` v0.5.3\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-28863", "package": "npm:tar", "purl": "pkg:npm/tar@4.4.13", "package_type": "npm", "package_usage": "optional", "version": "4.4.13", "fix_version": "6.2.1", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Denial of service while parsing a tar file due to lack of folders count validation\n## Description: \nDuring some analysis today on npm's `node tar` package I came across the folder creation process, Basicly if you provide node tar with a path like this `./a/b/c/foo.txt` it would create every folder and sub folder here a, b and c until it reaches the last folder to create `foo.txt`, In this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node tar and even crash the nodejs client within few seconds of running it using a path with too many sub folders inside\n\n## Steps To Reproduce:\nYou can reproduce this issue by downloading the tar file I provided in the resources and using node tar to extract it, you should get the same behavior as the video\n\n## Proof Of Concept:\nHere's a [video (https://hackerone us west 2 production attachments.s3.us west 2.amazonaws.com/3i7uojw8s52psar6pg8zkdo4h9io?response content disposition=attachment%3B%20filename%3D%22tar dos poc.webm%22%3B%20filename%2A%3DUTF 8%27%27tar dos poc.webm&response content type=video%2Fwebm&X Amz Algorithm=AWS4 HMAC SHA256&X Amz Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus west 2%2Fs3%2Faws4_request&X Amz Date=20240312T080103Z&X Amz Expires=3600&X Amz Security Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X Amz SignedHeaders=host&X Amz Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2) show casing the exploit: \n\n## Impact\n\nDenial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources\n\n## Report resources\n[payload.txt (https://hackerone us west 2 production attachments.s3.us west 2.amazonaws.com/1e83ayb5dd3350fvj3gst0mqixwk?response content disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF 8%27%27payload.txt&response content type=text%2Fplain&X Amz Algorithm=AWS4 HMAC SHA256&X Amz Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus west 2%2Fs3%2Faws4_request&X Amz Date=20240312T080103Z&X Amz Expires=3600&X Amz Security Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X Amz SignedHeaders=host&X Amz Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae)\n[archeive.tar.gz (https://hackerone us west 2 production attachments.s3.us west 2.amazonaws.com/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response content disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF 8%27%27archive.tar.gz&response content type=application%2Fx tar&X Amz Algorithm=AWS4 HMAC SHA256&X Amz Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus west 2%2Fs3%2Faws4_request&X Amz Date=20240312T080103Z&X Amz Expires=3600&X Amz Security Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X Amz SignedHeaders=host&X Amz Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea)\n\n## Note\nThis report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago\nUpgrade to version 6.2.1 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23337", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.21", "severity": "HIGH", "cvss_score": "7.2", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nUpgrade to version 4.17.21 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2018-3721", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.5", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.5 or later.\nUpgrade to version 4.17.5 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2019-10744", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.21", "package_type": "npm", "package_usage": "required", "version": "4.17.21", "fix_version": "4.17.12", "severity": "CRITICAL", "cvss_score": "9.1", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.\tThe function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n## Recommendation\n\nUpdate to version 4.17.12 or later.\nUpgrade to version 4.17.12 or later", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2022-37620", "package": "npm:html-minifier", "purl": "pkg:npm/html-minifier@3.5.21", "package_type": "npm", "package_usage": "optional", "version": "3.5.21", "fix_version": null, "severity": "HIGH", "cvss_score": "7.5", "short_description": "# kangax html minifier REDoS vulnerability\nA Regular Expression Denial of Service (ReDoS) flaw was found in kangax html minifier 4.0.0 via the candidate variable in htmlminifier.js.\nNone", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24304", "package": "npm:mongoose", "purl": "pkg:npm/mongoose@4.2.4", "package_type": "npm", "package_usage": "optional", "version": "4.2.4", "fix_version": "5.13.20", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Mongoose Vulnerable to Prototype Pollution in Schema Object\n### Description\nMongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `Schema.path()` function is vulnerable to prototype pollution when setting the `schema` object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.\n\n### Proof of Concept\n```js\n// poc.js\nconst mongoose = require('mongoose');\nconst schema = new mongoose.Schema();\n\nmalicious_payload = '__proto__.toString'\n\nschema.path(malicious_payload, [String )\n\nx = {}\nconsole.log(x.toString()) // crashed (Denial of service (DoS) attack)\n```\n\n### Impact\nThis vulnerability can be manipulated to exploit other types of attacks, such as Denial of service (DoS), Remote Code Execution, or Property Injection.\nUpgrade to version 5.13.15 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-25887", "package": "npm:sanitize-html", "purl": "pkg:npm/sanitize-html@1.4.2", "package_type": "npm", "package_usage": "required", "version": "1.4.2", "fix_version": "2.12.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Sanitize html Vulnerable To REDoS Attacks\nThe package sanitize html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.\nUpgrade to version 2.7.1 or later", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2024-33883", "package": "npm:ejs", "purl": "pkg:npm/ejs@0.8.8", "package_type": "npm", "package_usage": "optional", "version": "0.8.8", "fix_version": "3.1.10", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# ejs lacks certain pollution protection\nThe ejs (aka Embedded JavaScript templates) package before 3.1.10 for Node.js lacks certain pollution protection.\nUpgrade to version 3.1.10 or later", "related_urls": [], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2024-34393", "package": "npm:libxmljs2", "purl": "pkg:npm/libxmljs2@0.33.0", "package_type": "npm", "package_usage": "required", "version": "0.33.0", "fix_version": null, "severity": "HIGH", "cvss_score": "8.1", "short_description": "# libxmljs2 type confusion vulnerability when parsing specially crafted XML\nlibxmljs2 is vulnerable to type confusion when parsing a specially crafted XML while invoking a function on the result of attrs() that was called on a parsed node. This vulnerability might lead to denial of service (on both 32 bit systems and 64 bit systems), data leak, infinite loop and remote code execution (on 32 bit systems with the XML_PARSE_HUGE flag enabled). At the time of publication, there is no fix.\nNone", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2024-34394", "package": "npm:libxmljs2", "purl": "pkg:npm/libxmljs2@0.33.0", "package_type": "npm", "package_usage": "required", "version": "0.33.0", "fix_version": null, "severity": "HIGH", "cvss_score": "8.1", "short_description": "# libxmljs vulnerable to type confusion when parsing specially crafted XML\nlibxmljs2 is vulnerable to a type confusion vulnerability when parsing a specially crafted XML while invoking the `namespaces()` function (which invokes `XmlNode::get_local_namespaces()`) on a grand child of a node that refers to an entity. This vulnerability can lead to denial of service and remote code execution.\nNone", "related_urls": [], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2024-36361", "package": "npm:pug", "purl": "pkg:npm/pug@3.0.2", "package_type": "npm", "package_usage": "required", "version": "3.0.2", "fix_version": null, "severity": "HIGH", "cvss_score": "8.1", "short_description": "# Pug allows JavaScript code execution if an application accepts untrusted input\nPug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the `compileClient`, `compileFileClient`, or `compileClientWithDependenciesTracked` function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers.\nNone", "related_urls": [], "occurrence_count": 4, "reachable_flows": 0}
{"id": "CVE-2023-32695", "package": "npm:socket.io-parser", "purl": "pkg:npm/socket.io-parser@4.0.5", "package_type": "npm", "package_usage": "optional", "version": "4.0.5", "fix_version": "4.2.3", "severity": "HIGH", "cvss_score": "7.3", "short_description": "# Insufficient validation when decoding a Socket.IO packet\n### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nTypeError: Cannot convert object to primitive value\n\t\t\t at Socket.emit (node:events:507:25)\n\t\t\t at .../node_modules/socket.io/lib/socket.js:531:14\n```\n\n### Patches\n\nA fix has been released today (2023/05/22):\n\n- https://github.com/socketio/socket.io-parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3, included in `socket.io-parser@4.2.3`\n- https://github.com/socketio/socket.io-parser/commit/2dc3c92622dad113b8676be06f23b1ed46b02ced, included in `socket.io-parser@3.4.3`\n\n| `socket.io` version | `socket.io-parser` version\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t| Needs minor update?\t\t\t\t\t\t\t\t\t|\n|---------------------|---------------------------------------------------------------------------------------------------------|--------------------------------------|\n| `4.5.2...latest`\t\t| `~4.2.0` ([ref](https://github.com/socketio/socket.io/commit/9890b036cf942f6b6ad2afeb6a8361c32cd5d528)) | `npm audit fix` should be sufficient |\n| `4.1.3...4.5.1`\t\t | `~4.1.1` ([ref](https://github.com/socketio/socket.io/commit/7c44893d7878cd5bba1eff43150c3e664f88fb57)) | Please upgrade to `socket.io@4.6.x`\t|\n| `3.0.5...4.1.2`\t\t | `~4.0.3` ([ref](https://github.com/socketio/socket.io/commit/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17)) | Please upgrade to `socket.io@4.6.x`\t|\n| `3.0.0...3.0.4`\t\t | `~4.0.1` ([ref](https://github.com/socketio/socket.io/commit/1af3267e3f5f7884214cf2ca4d5282d620092fb0)) | Please upgrade to `socket.io@4.6.x`\t|\n| `2.3.0...2.5.0`\t\t | `~3.4.0` ([ref](https://github.com/socketio/socket.io/commit/cf39362014f5ff13a17168b74772c43920d6e4fd)) | `npm audit fix` should be sufficient |\n\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open a discussion [here](https://github.com/socketio/socket.io/discussions)\n\nThanks to [@rafax00](https://github.com/rafax00) for the responsible disclosure.", "related_urls": ["https://github.com/socketio/socket.io-parser/security/advisories/GHSA-cqmj-92xf-r6r9", "https://nvd.nist.gov/vuln/detail/CVE-2023-32695", "https://github.com/socketio/socket.io-parser/commit/1c220ddbf45ea4b44bc8dbf6f9ae245f672ba1b9", "https://github.com/socketio/socket.io-parser/commit/2dc3c92622dad113b8676be06f23b1ed46b02ced", "https://github.com/socketio/socket.io-parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3", "https://github.com/socketio/socket.io-parser", "https://github.com/socketio/socket.io-parser/releases/tag/4.2.3"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-3765", "package": "npm:validator", "purl": "pkg:npm/validator@3.1.0", "package_type": "npm", "package_usage": "optional", "version": "3.1.0", "fix_version": "13.7.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Inefficient Regular Expression Complexity in validator.js\nvalidator.js prior to 13.7.0 is vulnerable to Inefficient Regular Expression Complexity", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-3765", "https://github.com/validatorjs/validator.js/commit/496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1", "https://github.com/validatorjs/validator.js", "https://huntr.dev/bounties/c37e975c-21a3-4c5f-9b57-04d63b28cfc9"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-7191", "package": "npm:qs", "purl": "pkg:npm/qs@1.2.2", "package_type": "npm", "package_usage": "optional", "version": "1.2.2", "fix_version": "1.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial-of-Service Memory Exhaustion in qs\nVersions prior to 1.0 of `qs` are affected by a denial of service condition. This condition is triggered by parsing a crafted string that deserializes into very large sparse arrays, resulting in the process running out of memory and eventually crashing.\n\n\n## Recommendation\n\nUpdate to version 1.0.0 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2014-7191", "https://github.com/visionmedia/node-querystring/issues/104", "https://github.com/raymondfeng/node-querystring/commit/43a604b7847e56bba49d0ce3e222fe89569354d8", "https://access.redhat.com/errata/RHSA-2016:1380", "https://exchange.xforce.ibmcloud.com/vulnerabilities/96729", "https://github.com/advisories/GHSA-jjv7-qpx3-h62q", "https://github.com/visionmedia/node-querystring", "https://www.npmjs.com/advisories/29", "http://secunia.com/advisories/60026", "http://secunia.com/advisories/62170", "http://www-01.ibm.com/support/docview.wss?uid=swg21685987", "http://www-01.ibm.com/support/docview.wss?uid=swg21687263", "http://www-01.ibm.com/support/docview.wss?uid=swg21687928"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-xc7v-wxcw-j472", "package": "npm:tunnel-agent", "purl": "pkg:npm/tunnel-agent@0.4.3", "package_type": "npm", "package_usage": "optional", "version": "0.4.3", "fix_version": "0.6.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Memory Exposure in tunnel-agent\nVersions of `tunnel-agent` before 0.6.0 are vulnerable to memory exposure.\n\nThis is exploitable if user supplied input is provided to the auth value and is a number.\n\nProof-of-concept:\n```js\nrequire('request')({\n\tmethod: 'GET',\n\turi: 'http://www.example.com',\n\ttunnel: true,\n\tproxy:{\n\t\tprotocol: 'http:',\n\t\thost:'127.0.0.1',\n\t\tport:8080,\n\t\tauth:USERSUPPLIEDINPUT // number\n\t}\n});\n```\n\n\n## Recommendation\n\nUpdate to version 0.6.0 or later.", "related_urls": ["https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0", "https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4", "https://www.npmjs.com/advisories/598"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-r5xw-q988-826m", "package": "npm:mongoose", "purl": "pkg:npm/mongoose@4.2.4", "package_type": "npm", "package_usage": "optional", "version": "4.2.4", "fix_version": "4.3.6", "severity": "MEDIUM", "cvss_score": "5.1", "short_description": "# Remote Memory Exposure in mongoose\nVersions of `mongoose` before 4.3.6, 3.8.39 are vulnerable to remote memory exposure.\n\nTrying to save a number to a field of type Buffer on the affected mongoose versions allocates a chunk of uninitialized memory and stores it in the database.\n\n\n## Recommendation\n\nUpdate to version 4.3.6, 3.8.39 or later.", "related_urls": ["https://github.com/Automattic/mongoose/issues/3764", "https://gist.github.com/ChALkeR/440bc3dfcbd9b6da75c3", "https://gist.github.com/ChALkeR/d4a8055625221b6e65f0", "https://www.npmjs.com/advisories/599"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-36jr-mh4h-2g58", "package": "npm:d3-color", "purl": "pkg:npm/d3-color@1.4.1", "package_type": "npm", "package_usage": "optional", "version": "1.4.1", "fix_version": "3.1.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# d3-color vulnerable to ReDoS\nThe d3-color module provides representations for various color spaces in the browser. Versions prior to 3.1.0 are vulnerable to a Regular expression Denial of Service. This issue has been patched in version 3.1.0. There are no known workarounds.", "related_urls": ["https://github.com/d3/d3-color/pull/100", "https://github.com/d3/d3-color", "https://github.com/d3/d3-color/releases/tag/v3.1.0", "https://security.snyk.io/vuln/SNYK-JS-D3COLOR-1076592"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-25883", "package": "npm:semver", "purl": "pkg:npm/semver@5.7.2", "package_type": "npm", "package_usage": "required", "version": "5.7.2", "fix_version": "5.7.2", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# semver vulnerable to Regular Expression Denial of Service\nVersions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-25883", "https://github.com/npm/node-semver/pull/564", "https://github.com/npm/node-semver/pull/585", "https://github.com/npm/node-semver/pull/593", "https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0", "https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441", "https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c", "https://github.com/npm/node-semver", "https://github.com/npm/node-semver/blob/main/classes/range.js#L97-L104", "https://github.com/npm/node-semver/blob/main/internal/re.js#L138", "https://github.com/npm/node-semver/blob/main/internal/re.js#L160", "https://security.snyk.io/vuln/SNYK-JS-SEMVER-3247795"], "occurrence_count": 2, "reachable_flows": 0}
{"id": "CVE-2022-24772", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.10.0", "package_type": "npm", "package_usage": "optional", "version": "0.10.0", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node-forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g", "https://nvd.nist.gov/vuln/detail/CVE-2022-24772", "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1", "https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24785", "package": "npm:moment", "purl": "pkg:npm/moment@2.6.0", "package_type": "npm", "package_usage": "optional", "version": "2.6.0", "fix_version": "2.29.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Path Traversal: 'dir/../../filename' in moment.locale\n### Impact\nThis vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.\n\n### Patches\nThis problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).\n\n### Workarounds\nSanitize user-provided locale name before passing it to moment.js.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [moment repo](https://github.com/moment/moment)", "related_urls": ["https://github.com/moment/moment/security/advisories/GHSA-8hfj-j24r-96c4", "https://nvd.nist.gov/vuln/detail/CVE-2022-24785", "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5", "https://github.com/moment/moment", "https://lists.debian.org/debian-lts-announce/2023/01/msg00035.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6QIO6YNLTK2T7SPKDS4JEL45FANLNC2Q", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ORJX2LF6KMPIHP6B2P6KZIVKMLE3LVJ5", "https://security.netapp.com/advisory/ntap-20220513-0006", "https://www.tenable.com/security/tns-2022-09"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-37713", "package": "npm:tar", "purl": "pkg:npm/tar@4.4.13", "package_type": "npm", "package_usage": "optional", "version": "4.4.13", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.\tIf the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.\tThis is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.\tCurrently, it is believed that this check is redundant, but it did catch some oversights in development.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh", "https://nvd.nist.gov/vuln/detail/CVE-2021-37713", "https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946", "https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc", "https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/npm/node-tar", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24771", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.10.0", "package_type": "npm", "package_usage": "optional", "version": "0.10.0", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node-forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765", "https://nvd.nist.gov/vuln/detail/CVE-2022-24771", "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1", "https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24999", "package": "npm:qs", "purl": "pkg:npm/qs@1.2.2", "package_type": "npm", "package_usage": "optional", "version": "1.2.2", "fix_version": "6.2.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# qs vulnerable to Prototype Pollution\nqs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-24999", "https://github.com/ljharb/qs/pull/428", "https://github.com/ljharb/qs/commit/4310742efbd8c03f6495f07906b45213da0a32ec", "https://github.com/ljharb/qs/commit/727ef5d34605108acb3513f72d5435972ed15b68", "https://github.com/ljharb/qs/commit/73205259936317b40f447c5cdb71c5b341848e1b", "https://github.com/ljharb/qs/commit/8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "https://github.com/ljharb/qs/commit/ba24e74dd17931f825adb52f5633e48293b584e1", "https://github.com/ljharb/qs/commit/e799ba57e573a30c14b67c1889c7c04d508b9105", "https://github.com/ljharb/qs/commit/ed0f5dcbef4b168a8ae299d78b1e4a2e9b1baf1f", "https://github.com/ljharb/qs/commit/f945393cfe442fe8c6e62b4156fd35452c0686ee", "https://github.com/ljharb/qs/commit/fc3682776670524a42e19709ec4a8138d0d7afda", "https://github.com/expressjs/express/releases/tag/4.17.3", "https://github.com/ljharb/qs", "https://github.com/n8tz/CVE-2022-24999", "https://lists.debian.org/debian-lts-announce/2023/01/msg00039.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-32803", "package": "npm:tar", "purl": "pkg:npm/tar@4.4.13", "package_type": "npm", "package_usage": "optional", "version": "4.4.13", "fix_version": "4.4.15", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.\tAdditionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n\tfile: 'archive.tgz',\n\tfilter: (file, entry) => {\n\t\tif (entry.type === 'SymbolicLink') {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw", "https://nvd.nist.gov/vuln/detail/CVE-2021-32803", "https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356", "https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571", "https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349", "https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20", "https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/isaacs/node-tar", "https://www.npmjs.com/advisories/1771", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2016-4055", "package": "npm:moment", "purl": "pkg:npm/moment@2.6.0", "package_type": "npm", "package_usage": "optional", "version": "2.6.0", "fix_version": "2.29.2", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Regular Expression Denial of Service in moment\nVersions of `moment` prior to 2.11.2 are affected by a regular expression denial of service vulnerability. The vulnerability is triggered when arbitrary user input is passed into `moment.duration()`.\n\n\n## Proof of concept\n```\nvar moment = require('moment');\n\nvar genstr = function (len, chr) {\n\t\tvar result = \"\";\n\t\tfor (i=0; i<=len; i++) {\n\t\t\t\tresult = result + chr;\n\t\t}\n\n\t\treturn result;\n}\n\n\nfor (i=20000;i<=10000000;i=i+10000) {\n\t\tconsole.log(\"COUNT: \" + i);\n\t\tvar str = '-' + genstr(i, '1')\n\t\tconsole.log(\"LENGTH: \" + str.length);\n\t\tvar start = process.hrtime();\n\t\tmoment.duration(str)\n\n\t\tvar end = process.hrtime(start);\n\t\tconsole.log(end);\n}\n```\n\n### Results\n```\n$ node moment.js\nCOUNT: 20000\nLENGTH: 20002\n[ 0, 618931029 ]\nCOUNT: 30001\nLENGTH: 30003\n[ 1, 401413894 ]\nCOUNT: 40002\nLENGTH: 40004\n[ 2, 437075303 ]\nCOUNT: 50003\nLENGTH: 50005\n[ 3, 824664804 ]\nCOUNT: 60004\nLENGTH: 60006\n[ 5, 651335262 ]\n```\n\n\n## Recommendation\n\nPlease update to version 2.11.2 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2016-4055", "https://github.com/advisories/GHSA-87vv-r9j6-g5qv", "https://github.com/moment/moment", "https://lists.apache.org/thread.html/10f0f3aefd51444d1198c65f44ffdf2d78ca3359423dbc1c168c9731@%3Cdev.flink.apache.org%3E", "https://lists.apache.org/thread.html/17ff53f7999e74fbe3cc0ceb4e1c3b00b180b7c5afec8e978837bc49@%3Cuser.flink.apache.org%3E", "https://lists.apache.org/thread.html/52bafac05ad174000ea465fe275fd3cc7bd5c25535a7631c0bc9bfb2@%3Cuser.flink.apache.org%3E", "https://lists.apache.org/thread.html/54df3aeb4239b64b50b356f0ca6f986e3c4ca5b84c515dce077c7854@%3Cuser.flink.apache.org%3E", "https://www.npmjs.com/advisories/55", "https://www.tenable.com/security/tns-2019-02", "http://www.openwall.com/lists/oss-security/2016/04/20/11", "http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html", "http://www.securityfocus.com/bid/95849"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-37601", "package": "npm:loader-utils", "purl": "pkg:npm/loader-utils@1.4.2", "package_type": "npm", "package_usage": "optional", "version": "1.4.2", "fix_version": "1.4.1", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Prototype pollution in webpack loader-utils\nPrototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-37601", "https://github.com/webpack/loader-utils/issues/212", "https://github.com/webpack/loader-utils/issues/212#issuecomment-1319192884", "https://github.com/xmldom/xmldom/issues/436#issuecomment-1319412826", "https://github.com/webpack/loader-utils/pull/217", "https://github.com/webpack/loader-utils/pull/220", "https://github.com/webpack/loader-utils/commit/4504e34c4796a5836ef70458327351675aed48a5", "https://github.com/webpack/loader-utils/commit/a93cf6f4702012030f6b5ee8340d5c95ec1c7d4c", "https://github.com/webpack/loader-utils/commit/f4e48a232fae900237c3e5ff7b57ce9e1c734de1", "https://dl.acm.org/doi/abs/10.1145/3488932.3497769", "https://dl.acm.org/doi/pdf/10.1145/3488932.3497769", "https://github.com/webpack/loader-utils", "https://github.com/webpack/loader-utils/releases/tag/v1.4.1", "https://github.com/webpack/loader-utils/releases/tag/v2.0.3", "https://lists.debian.org/debian-lts-announce/2022/12/msg00044.html", "http://users.encs.concordia.ca/~mmannan/publications/JS-vulnerability-aisaccs2022.pdf"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-rvg8-pwq2-xj7q", "package": "npm:base64url", "purl": "pkg:npm/base64url@0.0.6", "package_type": "npm", "package_usage": "optional", "version": "0.0.6", "fix_version": "3.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out-of-bounds Read in base64url\nVersions of `base64url` before 3.0.0 are vulnerable to to out-of-bounds reads as it allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.\n\n\n## Recommendation\n\nUpdate to version 3.0.0 or later.", "related_urls": ["https://github.com/brianloveswords/base64url/pull/25", "https://github.com/brianloveswords/base64url/commit/4fbd954a0a69e9d898de2146557cc6e893e79542", "https://hackerone.com/reports/321687", "https://github.com/brianloveswords/base64url"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-28469", "package": "npm:glob-parent", "purl": "pkg:npm/glob-parent@5.1.2", "package_type": "npm", "package_usage": "optional", "version": "5.1.2", "fix_version": "5.1.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# glob-parent vulnerable to Regular Expression Denial of Service in enclosure regex\nThis affects the package glob-parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.\n\n## Related CVE(s)\nBIT-gulp-2020-28469, CVE-2020-28469, SNYK-JAVA-ORGWEBJARSBOWERGITHUBES128-1059093, SNYK-JAVA-ORGWEBJARSNPM-1059092, SNYK-JS-GLOBPARENT-1016905", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-28469", "https://github.com/gulpjs/glob-parent/pull/36", "https://github.com/gulpjs/glob-parent/pull/36/commits/c6db86422a9731d4f3d332ce4a81c27ea6b0ee46", "https://github.com/gulpjs/glob-parent", "https://github.com/gulpjs/glob-parent/blob/6ce8d11f2f1ed8e80a9526b1dc8cf3aa71f43474/index.js%23L9", "https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWERGITHUBES128-1059093", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1059092", "https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905", "https://www.oracle.com/security-alerts/cpujan2022.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-7693", "package": "npm:sockjs", "purl": "pkg:npm/sockjs@0.3.19", "package_type": "npm", "package_usage": "optional", "version": "0.3.19", "fix_version": "0.3.20", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Improper Input Validation in SocksJS-Node\nIncorrect handling of Upgrade header with the value websocket leads in crashing of containers hosting sockjs apps. This affects the package sockjs before 0.3.20.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-7693", "https://github.com/sockjs/sockjs-node/issues/252", "https://github.com/sockjs/sockjs-node/pull/265", "https://github.com/sockjs/sockjs-node/commit/dd7e642cd69ee74385825816d30642c43e051d16", "https://github.com/andsnw/sockjs-dos-py", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-575448", "https://snyk.io/vuln/SNYK-JS-SOCKJS-575261", "https://www.npmjs.com/package/sockjs"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-xf5p-87ch-gxw2", "package": "npm:marked", "purl": "pkg:npm/marked@0.4.0", "package_type": "npm", "package_usage": "optional", "version": "0.4.0", "fix_version": "0.6.2", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Marked ReDoS due to email addresses being evaluated in quadratic time\nVersions of `marked` from 0.3.14 until 0.6.2 are vulnerable to Regular Expression Denial of Service. Email addresses may be evaluated in quadratic time, allowing attackers to potentially crash the node process due to resource exhaustion.\n\n\n## Recommendation\n\nUpgrade to version 0.6.2 or later.", "related_urls": ["https://github.com/markedjs/marked/pull/1460", "https://github.com/markedjs/marked/commit/b15e42b67cec9ded8505e9d68bb8741ad7a9590d", "https://github.com/markedjs/marked", "https://github.com/markedjs/marked/releases/tag/v0.6.2", "https://snyk.io/vuln/SNYK-JS-MARKED-174116", "https://www.npmjs.com/advisories/812"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-32804", "package": "npm:tar", "purl": "pkg:npm/tar@4.4.13", "package_type": "npm", "package_usage": "optional", "version": "4.4.13", "fix_version": "4.4.14", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n\tfile: 'archive.tgz',\n\t// either add this function...\n\tonentry: (entry) => {\n\t\tif (path.isAbsolute(entry.path)) {\n\t\t\tentry.path = sanitizeAbsolutePathSomehow(entry.path)\n\t\t\tentry.absolute = path.resolve(entry.path)\n\t\t}\n\t},\n\n\t// or this one\n\tfilter: (file, entry) => {\n\t\tif (path.isAbsolute(entry.path)) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9", "https://nvd.nist.gov/vuln/detail/CVE-2021-32804", "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/npm/node-tar", "https://www.npmjs.com/advisories/1770", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-20165", "package": "npm:debug", "purl": "pkg:npm/debug@2.6.9", "package_type": "npm", "package_usage": "optional", "version": "2.6.9", "fix_version": "2.6.9", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# debug Inefficient Regular Expression Complexity vulnerability\nA vulnerability classified as problematic has been found in debug-js debug up to 3.0.x. This affects the function useColors of the file src/node.js. The manipulation of the argument str leads to inefficient regular expression complexity. Upgrading to version 3.1.0 is able to address this issue. The name of the patch is c38a0166c266a679c8de012d4eaccec3f944e685. It is recommended to upgrade the affected component. The identifier VDB-217665 was assigned to this vulnerability. The patch has been backported to the 2.6.x branch in version 2.6.9.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-20165", "https://github.com/debug-js/debug/pull/504", "https://github.com/debug-js/debug/commit/c38a0166c266a679c8de012d4eaccec3f944e685", "https://github.com/debug-js/debug/commit/f53962e944a87e6ca9bb622a2a12dffc22a9bb5a", "https://github.com/debug-js/debug", "https://github.com/debug-js/debug/releases/tag/2.6.9", "https://github.com/debug-js/debug/releases/tag/3.1.0", "https://vuldb.com/?ctiid.217665", "https://vuldb.com/?id.217665"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-gf8q-jrpm-jvxq", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.10.0", "package_type": "npm", "package_usage": "optional", "version": "0.10.0", "fix_version": "1.3.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# URL parsing in node-forge could lead to undesired behavior.\n### Impact\nThe regex used for the `forge.util.parseUrl` API would not properly parse certain inputs resulting in a parsed data structure that could lead to undesired behavior.\n\n### Patches\n`forge.util.parseUrl` and other very old related URL APIs were removed in 1.0.0 in favor of letting applications use the more modern WHATWG URL Standard API.\n\n### Workarounds\nEnsure code does not directly or indirectly call `forge.util.parseUrl` with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at support@digitalbazaar.com", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-gf8q-jrpm-jvxq", "https://nvd.nist.gov/vuln/detail/CVE-2022-0122", "https://github.com/digitalbazaar/forge", "https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-16137", "package": "npm:debug", "purl": "pkg:npm/debug@2.6.9", "package_type": "npm", "package_usage": "optional", "version": "2.6.9", "fix_version": "2.6.9", "severity": "LOW", "cvss_score": "3.7", "short_description": "# Regular Expression Denial of Service in debug\nAffected versions of `debug` are vulnerable to regular expression denial of service when untrusted user input is passed into the `o` formatter. \n\nAs it takes 50,000 characters to block the event loop for 2 seconds, this issue is a low severity issue.\n\nThis was later re-introduced in version v3.2.0, and then repatched in versions 3.2.7 and 4.3.1.\n\n## Recommendation\n\nVersion 2.x.x: Update to version 2.6.9 or later.\nVersion 3.1.x: Update to version 3.1.0 or later.\nVersion 3.2.x: Update to version 3.2.7 or later.\nVersion 4.x.x: Update to version 4.3.1 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-16137", "https://github.com/debug-js/debug/issues/797", "https://github.com/visionmedia/debug/issues/501", "https://github.com/visionmedia/debug/pull/504", "https://github.com/debug-js/debug/commit/4e2150207c568adb9ead8f4c4528016081c88020", "https://github.com/debug-js/debug/commit/71169065b5262f9858ac78cc0b688c84a438f290", "https://github.com/debug-js/debug/commit/b6d12fdbc63b483e5c969da33ea6adc09946b5ac", "https://github.com/debug-js/debug/commit/f53962e944a87e6ca9bb622a2a12dffc22a9bb5a", "https://github.com/visionmedia/debug", "https://lists.apache.org/thread.html/r8ba4c628fba7181af58817d452119481adce4ba92e889c643e4c7dd3@%3Ccommits.netbeans.apache.org%3E", "https://lists.apache.org/thread.html/rb5ac16fad337d1f3bb7079549f97d8166d0ef3082629417c39f12d63@%3Cnotifications.netbeans.apache.org%3E"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2018-14732", "package": "npm:webpack-dev-server", "purl": "pkg:npm/webpack-dev-server@2.11.5", "package_type": "npm", "package_usage": "optional", "version": "2.11.5", "fix_version": "3.1.11", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Missing Origin Validation in webpack-dev-server\nVersions of `webpack-dev-server` before 3.1.10 are missing origin validation on the websocket server. This vulnerability allows a remote attacker to steal a developer's source code because the origin of requests to the websocket server that is used for Hot Module Replacement (HMR) are not validated.\n\n\n## Recommendation\nFor `webpack-dev-server` update to version 3.1.11 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2018-14732", "https://github.com/webpack/webpack-dev-server/issues/1445", "https://github.com/webpack/webpack-dev-server/issues/1620", "https://github.com/webpack/webpack-dev-server/commit/f18e5adf123221a1015be63e1ca2491ca45b8d10", "https://github.com/webpack/webpack-dev-server", "https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md#3111-2018-12-21", "https://www.npmjs.com/advisories/725"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-41940", "package": "npm:engine.io", "purl": "pkg:npm/engine.io@4.1.2", "package_type": "npm", "package_usage": "optional", "version": "4.1.2", "fix_version": "6.2.1", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Uncaught exception in engine.io\n### Impact\n\nA specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process.\n\n```\nevents.js:292\n\t\t\tthrow er; // Unhandled 'error' event\n\t\t\t^\n\nError: read ECONNRESET\n\t\tat TCP.onStreamRead (internal/stream_base_commons.js:209:20)\nEmitted 'error' event on Socket instance at:\n\t\tat emitErrorNT (internal/streams/destroy.js:106:8)\n\t\tat emitErrorCloseNT (internal/streams/destroy.js:74:3)\n\t\tat processTicksAndRejections (internal/process/task_queues.js:80:21) {\n\terrno: -104,\n\tcode: 'ECONNRESET',\n\tsyscall: 'read'\n}\n```\n\nThis impacts all the users of the [`engine.io`](https://www.npmjs.com/package/engine.io) package, including those who uses depending packages like [`socket.io`](https://www.npmjs.com/package/socket.io).\n\n### Patches\n\nA fix has been released today (2022/11/20):\n\n| Version range\t\t | Fixed version |\n|-------------------|---------------|\n| `engine.io@3.x.y` | `3.6.1`\t\t\t |\n| `engine.io@6.x.y` | `6.2.1`\t\t\t |\n\nFor `socket.io` users:\n\n| Version range\t\t\t\t\t\t\t | `engine.io` version | Needs minor update?\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n|-----------------------------|---------------------|--------------------------------------------------------------------------------------------------------|\n| `socket.io@4.5.x`\t\t\t\t\t | `~6.2.0`\t\t\t\t\t\t| `npm audit fix` should be sufficient\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| `socket.io@4.4.x`\t\t\t\t\t | `~6.1.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.3.x`\t\t\t\t\t | `~6.0.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.2.x`\t\t\t\t\t | `~5.2.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.1.x`\t\t\t\t\t | `~5.1.1`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@4.0.x`\t\t\t\t\t | `~5.0.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `socket.io@3.1.x`\t\t\t\t\t | `~4.1.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x` (see [here](https://socket.io/docs/v4/migrating-from-3-x-to-4-0/)) |\n| `socket.io@3.0.x`\t\t\t\t\t | `~4.0.0`\t\t\t\t\t\t| Please upgrade to `socket.io@4.5.x` (see [here](https://socket.io/docs/v4/migrating-from-3-x-to-4-0/)) |\n| `socket.io@2.5.0`\t\t\t\t\t | `~3.6.0`\t\t\t\t\t\t| `npm audit fix` should be sufficient\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| `socket.io@2.4.x` and below | `~3.5.0`\t\t\t\t\t\t| Please upgrade to `socket.io@2.5.0`\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n\n### Workarounds\n\nThere is no known workaround except upgrading to a safe version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [`engine.io`](https://github.com/socketio/engine.io)\n\nThanks to [Jonathan Neve](https://github.com/jonathanneve) for the responsible disclosure.", "related_urls": ["https://github.com/socketio/engine.io/security/advisories/GHSA-r7qp-cfhv-p84w", "https://nvd.nist.gov/vuln/detail/CVE-2022-41940", "https://github.com/socketio/engine.io/commit/425e833ab13373edf1dd5a0706f07100db14e3c6", "https://github.com/socketio/engine.io/commit/83c4071af871fc188298d7d591e95670bf9f9085", "https://github.com/socketio/engine.io"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-18214", "package": "npm:moment", "purl": "pkg:npm/moment@2.6.0", "package_type": "npm", "package_usage": "optional", "version": "2.6.0", "fix_version": "2.29.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in moment\nAffected versions of `moment` are vulnerable to a low severity regular expression denial of service when parsing dates as strings.\n\n\n## Recommendation\n\nUpdate to version 2.19.3 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-18214", "https://github.com/moment/moment/issues/4163", "https://github.com/moment/moment/pull/4326", "https://github.com/moment/moment/commit/69ed9d44957fa6ab12b73d2ae29d286a857b80eb", "https://github.com/advisories/GHSA-446m-mv8f-q348", "https://github.com/moment/moment", "https://www.npmjs.com/advisories/532", "https://www.tenable.com/security/tns-2019-02"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-15366", "package": "npm:ajv", "purl": "pkg:npm/ajv@6.12.6", "package_type": "npm", "package_usage": "optional", "version": "6.12.6", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-15366", "https://github.com/ajv-validator/ajv/commit/65b2f7d76b190ac63a0d4e9154c712d7aa37049f", "https://github.com/ajv-validator/ajv", "https://github.com/ajv-validator/ajv/releases/tag/v6.12.3", "https://github.com/ajv-validator/ajv/tags", "https://hackerone.com/bugs?subject=user&report_id=894259"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-7608", "package": "npm:yargs-parser", "purl": "pkg:npm/yargs-parser@13.1.2", "package_type": "npm", "package_usage": "optional", "version": "13.1.2", "fix_version": "5.0.1", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# yargs-parser Vulnerable to Prototype Pollution\nAffected versions of `yargs-parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.\t\nParsing the argument `--foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs-parser`.\n\n\n\n## Recommendation\n\nUpgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.\n\n## Related CVE(s)\nCVE-2020-7608, SNYK-JS-YARGSPARSER-560381", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-7608", "https://github.com/yargs/yargs-parser/commit/1c417bd0b42b09c475ee881e36d292af4fa2cc36", "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2", "https://github.com/yargs/yargs-parser", "https://snyk.io/vuln/SNYK-JS-YARGSPARSER-560381", "https://www.npmjs.com/advisories/1500"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-8857", "package": "npm:uglify-js", "purl": "pkg:npm/uglify-js@3.17.4", "package_type": "npm", "package_usage": "optional", "version": "3.17.4", "fix_version": "2.4.24", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Incorrect Handling of Non-Boolean Comparisons During Minification in uglify-js\nVersions of `uglify-js` prior to 2.4.24 are affected by a vulnerability which may cause crafted JavaScript to have altered functionality after minification.\n\n## Recommendation\n\nUpgrade UglifyJS to version >= 2.4.24.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2015-8857", "https://github.com/mishoo/UglifyJS2/issues/751", "https://github.com/lautis/uglifier/commit/4677bfe38142937ff952f95605bcec4618892c3e", "https://github.com/mishoo/UglifyJS2", "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uglifier/CVE-2015-8857.yml", "https://web.archive.org/web/20200227190830/http://www.securityfocus.com/bid/96410", "https://zyan.scripts.mit.edu/blog/backdooring-js", "http://www.openwall.com/lists/oss-security/2016/04/20/11"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-25881", "package": "npm:http-cache-semantics", "purl": "pkg:npm/http-cache-semantics@3.8.1", "package_type": "npm", "package_usage": "optional", "version": "3.8.1", "fix_version": "4.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# http-cache-semantics vulnerable to Regular Expression Denial of Service\nhttp-cache semantics contains an Inefficient Regular Expression Complexity , leading to Denial of Service. This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-25881", "https://github.com/kornelski/http-cache-semantics/commit/560b2d8ef452bbba20ffed69dc155d63ac757b74", "https://github.com/kornelski/http-cache-semantics", "https://github.com/kornelski/http-cache-semantics/blob/master/index.js%23L83", "https://security.netapp.com/advisory/ntap-20230622-0008", "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3253332", "https://security.snyk.io/vuln/SNYK-JS-HTTPCACHESEMANTICS-3248783"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2015-8858", "package": "npm:uglify-js", "purl": "pkg:npm/uglify-js@3.17.4", "package_type": "npm", "package_usage": "optional", "version": "3.17.4", "fix_version": "2.6.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in uglify-js\nVersions of `uglify-js` prior to 2.6.0 are affected by a regular expression denial of service vulnerability when malicious inputs are passed into the `parse()` method.\n\n\n### Proof of Concept\n\n```\nvar u = require('uglify-js');\nvar genstr = function (len, chr) {\n\t\tvar result = \"\";\n\t\tfor (i=0; i<=len; i++) {\n\t\t\t\tresult = result + chr;\n\t\t}\n\n\t\treturn result;\n}\n\nu.parse(\"var a = \" + genstr(process.argv[2], \"1\") + \".1ee7;\");\n```\n\n### Results\n```\n$ time node test.js 10000\nreal\t0m1.091s\nuser\t0m1.047s\nsys\t0m0.039s\n\n$ time node test.js 80000\nreal\t0m6.486s\nuser\t0m6.229s\nsys\t0m0.094s\n```\n\n\n## Recommendation\n\nUpdate to version 2.6.0 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2015-8858", "https://github.com/advisories/GHSA-c9f4-xj24-8jqx", "https://www.npmjs.com/advisories/48", "http://www.openwall.com/lists/oss-security/2016/04/20/11", "http://www.securityfocus.com/bid/96409"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23382", "package": "npm:postcss", "purl": "pkg:npm/postcss@6.0.23", "package_type": "npm", "package_usage": "optional", "version": "6.0.23", "fix_version": "7.0.36", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Regular Expression Denial of Service in postcss\nThe package postcss versions before 7.0.36 or between 8.0.0 and 8.2.13 are vulnerable to Regular Expression Denial of Service (ReDoS) via getAnnotationURL() and loadAnnotation() in lib/previous-map.js. The vulnerable regexes are caused mainly by the sub-pattern \n```regex\n\\/\\*\\s* sourceMappingURL=(.*)\n```\n\n### PoC\n```js\nvar postcss = require(\"postcss\")\nfunction build_attack(n) {\n\t\tvar ret = \"a{}\"\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tret += \"/*# sourceMappingURL=\"\n\t\t}\n\t\treturn ret + \"!\";\n}\n```\n```js\npostcss.parse('a{}/*# sourceMappingURL=a.css.map */') for (var i = 1; i <= 500000; i++) {\n\t\tif (i % 1000 == 0) {\n\t\t\t\tvar time = Date.now();\n\t\t\t\tvar attack_str = build_attack(i) try {\n\t\t\t\t\t\tpostcss.parse(attack_str) var time_cost = Date.now() - time;\n\t\t\t\t\t\tconsole.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost + \" ms\");\n\t\t\t\t} catch (e) {\n\t\t\t\t\t\tvar time_cost = Date.now() - time;\n\t\t\t\t\t\tconsole.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost + \" ms\");\n\t\t\t\t}\n\t\t}\n}\n```\n\n## Related CVE(s)\nCVE-2021-23382, SNYK-JAVA-ORGWEBJARSNPM-1255641, SNYK-JS-POSTCSS-1255640", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-23382", "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956", "https://github.com/postcss/postcss/releases/tag/7.0.36", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1255641", "https://snyk.io/vuln/SNYK-JS-POSTCSS-1255640"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-3517", "package": "npm:minimatch", "purl": "pkg:npm/minimatch@3.1.2", "package_type": "npm", "package_usage": "optional", "version": "3.1.2", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# minimatch ReDoS vulnerability\nA vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-3517", "https://github.com/grafana/grafana-image-renderer/issues/329", "https://github.com/nodejs/node/issues/42510", "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6", "https://github.com/isaacs/minimatch", "https://lists.debian.org/debian-lts-announce/2023/01/msg00011.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MTEUUTNIEBHGKUKKLNUZSV7IEP6IP3Q3", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UM6XJ73Q3NAM5KSGCOKJ2ZIA6GUWUJLK"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-8244", "package": "npm:bl", "purl": "pkg:npm/bl@0.9.5", "package_type": "npm", "package_usage": "optional", "version": "0.9.5", "fix_version": "1.2.3", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "# Remote Memory Exposure in bl\nA buffer over-read vulnerability exists in bl <4.0.3, <3.0.1, <2.2.1, and <1.2.3 which could allow an attacker to supply user input (even typed) that if it ends up in consume() argument and can become negative, the BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular .slice() calls.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-8244", "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e", "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190", "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466", "https://hackerone.com/reports/966347", "https://lists.debian.org/debian-lts-announce/2021/06/msg00028.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2020-7788", "package": "npm:ini", "purl": "pkg:npm/ini@1.3.8", "package_type": "npm", "package_usage": "optional", "version": "1.3.8", "fix_version": "1.3.6", "severity": "HIGH", "cvss_score": "7.3", "short_description": "# ini before 1.3.6 vulnerable to Prototype Pollution via ini.parse\n### Overview\nThe `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.\n\nIf an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\n\n### Patches\n\nThis has been patched in 1.3.6.\n\n### Steps to reproduce\n\npayload.ini\n```\n[__proto__]\npolluted = \"polluted\"\n```\n\npoc.js:\n```\nvar fs = require('fs')\nvar ini = require('ini')\n\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\nconsole.log(parsed)\nconsole.log(parsed.__proto__)\nconsole.log(polluted)\n```\n\n```\n> node poc.js\n{}\n{ polluted: 'polluted' }\n{ polluted: 'polluted' }\npolluted\n```\n\n## Related CVE(s)\nCVE-2020-7788, SNYK-JS-INI-1048974", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2020-7788", "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1", "https://github.com/npm/ini", "https://lists.debian.org/debian-lts-announce/2020/12/msg00032.html", "https://snyk.io/vuln/SNYK-JS-INI-1048974", "https://www.npmjs.com/advisories/1589"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-1000048", "package": "npm:qs", "purl": "pkg:npm/qs@1.2.2", "package_type": "npm", "package_usage": "optional", "version": "1.2.2", "fix_version": "6.2.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution Protection Bypass in qs\nAffected version of `qs` are vulnerable to Prototype Pollution because it is possible to bypass the protection. The `qs.parse` function fails to properly prevent an object's prototype to be altered when parsing arbitrary input. Input containing `[` or `]` may bypass the prototype pollution protection and alter the Object prototype. This allows attackers to override properties that will exist in all objects, which may lead to Denial of Service or Remote Code Execution in specific circumstances.\n\n\n## Recommendation\n\nUpgrade to 6.0.4, 6.1.2, 6.2.3, 6.3.2 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-1000048", "https://github.com/ljharb/qs/issues/200", "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d", "https://access.redhat.com/errata/RHSA-2017:2672", "https://github.com/ljharb/qs", "https://snyk.io/vuln/npm:qs:20170213", "https://www.npmjs.com/advisories/1469"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-4231", "package": "@angular:core", "purl": "pkg:npm/%40angular/core@15.2.10", "package_type": "@angular", "package_usage": "required", "version": "15.2.10", "fix_version": "10.2.5", "severity": "MEDIUM", "cvss_score": "5.4", "short_description": "# Cross site scripting in Angular\nA vulnerability was found in Angular up to 11.0.4/11.1.0-next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 10.2.5, 11.0.5 or 11.1.0-next.3 is advised to to address this issue.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-4231", "https://github.com/angular/angular/issues/40136", "https://github.com/angular/angular/commit/0aa220bc0000fc4d1651ec388975bbf5baa1da36", "https://github.com/angular/angular/commit/47d9b6d72dab9d60c96bc1c3604219f6385649ea", "https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09", "https://github.com/angular/angular", "https://security.snyk.io/vuln/SNYK-JS-ANGULARCORE-1070902", "https://vuldb.com/?id.181356"], "occurrence_count": 120, "reachable_flows": 0}
{"id": "CVE-2014-10064", "package": "npm:qs", "purl": "pkg:npm/qs@1.2.2", "package_type": "npm", "package_usage": "optional", "version": "1.2.2", "fix_version": "1.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial-of-Service Extended Event Loop Blocking in qs\nVersions prior to 1.0.0 of `qs` are affected by a denial of service vulnerability that results from excessive recursion in parsing a deeply nested JSON string.\n\n\n\n\n## Recommendation\n\nUpdate to version 1.0.0 or later", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2014-10064", "https://github.com/advisories/GHSA-f9cm-p3w6-xvr3", "https://www.npmjs.com/advisories/28"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2017-16026", "package": "npm:request", "purl": "pkg:npm/request@2.45.0", "package_type": "npm", "package_usage": "required", "version": "2.45.0", "fix_version": "2.68.0", "severity": "MEDIUM", "cvss_score": "5.9", "short_description": "# Remote Memory Exposure in request\nAffected versions of `request` will disclose local system memory to remote systems in certain circumstances. When a multipart request is made, and the type of `body` is `number`, then a buffer of that size will be allocated and sent to the remote server as the body.\n\n## Proof of Concept\n\n```js\nvar request = require('request');\nvar http = require('http');\n\nvar serveFunction = function (req, res){\n\treq.on('data', function (data) {\n\t\t\t\t\t\tconsole.log(data)\n\t\t\t\t});\n\tres.end();\n};\nvar server = http.createServer(serveFunction);\nserver.listen(8000);\n\nrequest({\n\tmethod: \"POST\",\n\turi: 'http://localhost:8000',\n\tmultipart: [{body:500}]\n},function(err,res,body){});\n```\n\n\n## Recommendation\n\nUpdate to version 2.68.0 or later", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2017-16026", "https://github.com/request/request/issues/1904", "https://github.com/request/request/pull/2018", "https://github.com/request/request/pull/2022", "https://github.com/request/request/commit/29d81814bc16bc79cb112b4face8be6fc00061dd", "https://github.com/request/request"], "occurrence_count": 5, "reachable_flows": 0}
{"id": "GHSA-5rrq-pxf6-6jx5", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.10.0", "package_type": "npm", "package_usage": "optional", "version": "0.10.0", "fix_version": "1.3.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in node-forge debug API.\n### Impact\nThe `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.\tIt is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.\n\n### Patches\nThe `forge.debug` API and related functions were removed in 1.0.0.\n\n### Workarounds\nDon't use the `forge.debug` API directly or indirectly with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/1-npm-node-forge/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-5rrq-pxf6-6jx5", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-ch52-vgq2-943f", "package": "npm:marked", "purl": "pkg:npm/marked@0.4.0", "package_type": "npm", "package_usage": "optional", "version": "0.4.0", "fix_version": "0.7.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service in marked\nAffected versions of `marked` are vulnerable to Regular Expression Denial of Service (ReDoS). The `_label` subrule may significantly degrade parsing performance of malformed input.\n\n\n## Recommendation\n\nUpgrade to version 0.7.0 or later.", "related_urls": ["https://www.npmjs.com/advisories/1076"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-0235", "package": "npm:node-fetch", "purl": "pkg:npm/node-fetch@2.6.1", "package_type": "npm", "package_usage": "optional", "version": "2.6.1", "fix_version": "2.6.7", "severity": "HIGH", "cvss_score": "8.8", "short_description": "# node-fetch forwards secure headers to untrusted sites\nnode-fetch forwards secure headers such as `authorization`, `www-authenticate`, `cookie`, & `cookie2` when redirecting to a untrusted site.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-0235", "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60", "https://github.com/node-fetch/node-fetch/pull/1453", "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35", "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10", "https://github.com/node-fetch/node-fetch/commit/5c32f002fdd65b1c6a8f1e3620210813d45c7e60", "https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf", "https://github.com/node-fetch/node-fetch", "https://huntr.dev/bounties/d26ab655-38d6-48b3-be15-f9ad6b6ae6f7", "https://lists.debian.org/debian-lts-announce/2022/12/msg00007.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-23566", "package": "npm:nanoid", "purl": "pkg:npm/nanoid@3.1.20", "package_type": "npm", "package_usage": "optional", "version": "3.1.20", "fix_version": "3.1.31", "severity": "MEDIUM", "cvss_score": "5.5", "short_description": "# Exposure of Sensitive Information to an Unauthorized Actor in nanoid\nThe package nanoid from 3.0.0, before 3.1.31, are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.\n\n## Related CVE(s)\nCVE-2021-23566, SNYK-JAVA-ORGWEBJARSNPM-2332550, SNYK-JS-NANOID-2332193", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-23566", "https://github.com/ai/nanoid/pull/328", "https://github.com/ai/nanoid/commit/2b7bd9332bc49b6330c7ddb08e5c661833db2575", "https://gist.github.com/artalar/bc6d1eb9a3477d15d2772e876169a444", "https://github.com/ai/nanoid", "https://snyk.io/vuln/SNYK-JS-NANOID-2332193"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-33623", "package": "npm:trim-newlines", "purl": "pkg:npm/trim-newlines@1.0.0", "package_type": "npm", "package_usage": "optional", "version": "1.0.0", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in trim-newlines\n@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the `.end()` method.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-33623", "https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91", "https://github.com/sindresorhus/trim-newlines/commit/b10d5f4afef832b16bc56d49fc52c68cbd403869", "https://github.com/sindresorhus/trim-newlines", "https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1", "https://lists.debian.org/debian-lts-announce/2022/12/msg00033.html", "https://security.netapp.com/advisory/ntap-20210702-0007", "https://www.npmjs.com/package/trim-newlines"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-8j8c-7jfh-h6hx", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.14.1", "package_type": "npm", "package_usage": "required", "version": "3.14.1", "fix_version": "3.13.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Code Injection in js-yaml\nVersions of `js-yaml` prior to 3.13.1 are vulnerable to Code Injection. The `load()` function may execute arbitrary code injected through a malicious YAML file. Objects that have `toString` as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the `load()` function. The `safeLoad()` function is unaffected.\n\nAn example payload is \n`{ toString: !<tag:yaml.org,2002:js/function> 'function (){return Date.now()}' } : 1` \nwhich returns the object \n{\n\t\"1553107949161\": 1\n}\n\n\n## Recommendation\n\nUpgrade to version 3.13.1.", "related_urls": ["https://github.com/nodeca/js-yaml/pull/480", "https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61", "https://www.npmjs.com/advisories/813"], "occurrence_count": 8, "reachable_flows": 0}
{"id": "CVE-2018-16492", "package": "npm:extend", "purl": "pkg:npm/extend@1.2.1", "package_type": "npm", "package_usage": "optional", "version": "1.2.1", "fix_version": "2.0.2", "severity": "MEDIUM", "cvss_score": "5.6", "short_description": "# Prototype Pollution in extend\nVersions of `extend` prior to 3.0.2 (for 3.x) and 2.0.2 (for 2.x) are vulnerable to Prototype Pollution. The `extend()` function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nIf you're using `extend` 3.x upgrade to 3.0.2 or later.\nIf you're using `extend` 2.x upgrade to 2.0.2 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2018-16492", "https://hackerone.com/reports/381185", "https://github.com/advisories/GHSA-qrmc-fj45-qfc2", "https://www.npmjs.com/advisories/996"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-mh5c-679w-hh4r", "package": "npm:mongodb", "purl": "pkg:npm/mongodb@2.0.46", "package_type": "npm", "package_usage": "optional", "version": "2.0.46", "fix_version": "3.1.13", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial of Service in mongodb\nVersions of `mongodb` prior to 3.1.13 are vulnerable to Denial of Service. The package fails to properly catch an exception when a collection name is invalid and the DB does not exist, crashing the application.\n\n\n## Recommendation\n\nUpgrade to version 3.1.13 or later.", "related_urls": ["https://www.npmjs.com/advisories/1203"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-46175", "package": "npm:json5", "purl": "pkg:npm/json5@0.5.1", "package_type": "npm", "package_usage": "optional", "version": "0.5.1", "fix_version": "1.0.2", "severity": "HIGH", "cvss_score": "7.1", "short_description": "# Prototype Pollution in JSON5 via Parse Method\nThe `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) => {\n\tif (props.isAdmin) {\n\t\tconsole.log('Doing dangerous thing as admin.');\n\t} else {\n\t\tconsole.log('Doing dangerous thing as user.');\n\t}\n};\n\nconst secCheckKeysSet = (obj, searchKeys) => {\n\tlet searchKeyFound = false;\n\tObject.keys(obj).forEach((key) => {\n\t\tif (searchKeys.indexOf(key) > -1) {\n\t\t\tsearchKeyFound = true;\n\t\t}\n\t});\n\treturn searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n\tdoSomethingDangerous(props); // \"Doing dangerous thing as user.\"\n} else {\n\tthrow new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n\tdoSomethingDangerous(props);\n} else {\n\tthrow new Error('Forbidden...'); // Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n\tdoSomethingDangerous(props); // \"Doing dangerous thing as admin.\"\n} else {\n\tthrow new Error('Forbidden...');\n}\n ```", "related_urls": ["https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h", "https://nvd.nist.gov/vuln/detail/CVE-2022-46175", "https://github.com/json5/json5/issues/199", "https://github.com/json5/json5/issues/295", "https://github.com/json5/json5/pull/298", "https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972", "https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8", "https://github.com/json5/json5", "https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-24773", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.10.0", "package_type": "npm", "package_usage": "optional", "version": "0.10.0", "fix_version": "1.3.0", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "# Improper Verification of Cryptographic Signature in `node-forge`\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)", "related_urls": ["https://github.com/digitalbazaar/forge/security/advisories/GHSA-2r2c-g63r-vccr", "https://nvd.nist.gov/vuln/detail/CVE-2022-24773", "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1", "https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2", "https://github.com/digitalbazaar/forge"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-2pr6-76vf-7546", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.14.1", "package_type": "npm", "package_usage": "required", "version": "3.14.1", "fix_version": "3.13.0", "severity": "MEDIUM", "cvss_score": "5.9", "short_description": "# Denial of Service in js-yaml\nVersions of `js-yaml` prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully-crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 3.13.0.", "related_urls": ["https://github.com/nodeca/js-yaml/issues/475", "https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235", "https://snyk.io/vuln/SNYK-JS-JSYAML-173999", "https://www.npmjs.com/advisories/788", "https://www.npmjs.com/advisories/788/versions"], "occurrence_count": 8, "reachable_flows": 0}
{"id": "CVE-2024-29180", "package": "npm:webpack-dev-middleware", "purl": "pkg:npm/webpack-dev-middleware@1.12.2", "package_type": "npm", "package_usage": "optional", "version": "1.12.2", "fix_version": "5.3.4", "severity": "HIGH", "cvss_score": "7.4", "short_description": "# Path traversal in webpack-dev-middleware\n### Summary\n_The **webpack-dev-middleware** middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine._\n\n### Details\nThe middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory _memfs_ filesystem.\nIf _writeToDisk_ configuration option is set to **true**, the physical filesystem is used:\n[https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21](https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21)\n\nThe _**getFilenameFromUrl**_ method is used to parse URL and build the local file path.\nThe public path prefix is stripped from the URL, and the **unsecaped** path suffix is appended to the _outputPath_:\n[https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82](https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82)\nAs the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use _%2e_ and _%2f_ sequences to perform path traversal attack.\n\n### PoC\n_A blank project can be created containing the following configuration file **webpack.config.js**:_\n`module.exports = {\n\tdevServer: {\n\t\tdevMiddleware: {\n\t\t\twriteToDisk: true\n\t\t}\n\t}\n};\n`\n\nWhen started, it is possible to access any local file, e.g. _/etc/passwd_:\n`$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd`\n```\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\n```\n\n### Impact\nThe developers using _webpack-dev-server_ or _webpack-dev-middleware_ are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).\n\nIf the development server is listening on a public IP address (or **0.0.0.0**), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).\n\nIf the server allows access from third-party domains (CORS, **_Allow-Access-Origin: *_** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.\n\n### Recommendation\nThe URL should be unescaped and normalized before any further processing.", "related_urls": ["https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6", "https://nvd.nist.gov/vuln/detail/CVE-2024-29180", "https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132", "https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353", "https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e", "https://github.com/webpack/webpack-dev-middleware", "https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82", "https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21", "https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4", "https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2", "https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-4xcv-9jjx-gfj3", "package": "npm:mem", "purl": "pkg:npm/mem@1.1.0", "package_type": "npm", "package_usage": "optional", "version": "1.1.0", "fix_version": "4.0.0", "severity": "MEDIUM", "cvss_score": "5.1", "short_description": "# Denial of Service in mem\nVersions of `mem` prior to 4.0.0 are vulnerable to Denial of Service (DoS).\tThe package fails to remove old values from the cache even after a value passes its `maxAge` property. This may allow attackers to exhaust the system's memory if they are able to abuse the application logging.\n\n\n## Recommendation\n\nUpgrade to version 4.0.0 or later.", "related_urls": ["https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b", "https://bugzilla.redhat.com/show_bug.cgi?id=1623744", "https://snyk.io/vuln/npm:mem:20180117", "https://www.npmjs.com/advisories/1084"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2014-8882", "package": "npm:validator", "purl": "pkg:npm/validator@3.1.0", "package_type": "npm", "package_usage": "optional", "version": "3.1.0", "fix_version": "3.22.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in validator\nVersions of `validator` prior to 3.22.1 are affected by a regular expression denial of service vulnerability in the `isURL` method.\n\n\n## Recommendation\n\nUpdate to version 3.22.1 or later.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2014-8882", "https://github.com/chriso/validator.js/issues/152#issuecomment-48107184", "https://github.com/chriso/validator.js", "https://snyk.io/vuln/npm:validator:20130705", "https://www.npmjs.com/advisories/42"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-37701", "package": "npm:tar", "purl": "pkg:npm/tar@4.4.13", "package_type": "npm", "package_usage": "optional", "version": "4.4.13", "fix_version": "4.4.16", "severity": "HIGH", "cvss_score": "8.2", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case-insensitive filesystems.\tIf a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.\tA subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n\tfile: 'archive.tgz',\n\tfilter: (file, entry) => {\n\t\tif (entry.type === 'SymbolicLink') {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing `\\` with `/` on Windows systems, and leaving `\\` intact in the path on posix systems.\tThis is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case-insensitively.\tThis _may_ result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.\tThis is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well-tested method such as `path.resolve()` before comparing paths to one another.", "related_urls": ["https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc", "https://nvd.nist.gov/vuln/detail/CVE-2021-37701", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf", "https://github.com/npm/node-tar", "https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html", "https://www.debian.org/security/2021/dsa-5008", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2023-45311", "package": "npm:fsevents", "purl": "pkg:npm/fsevents@1.2.10", "package_type": "npm", "package_usage": "optional", "version": "1.2.10", "fix_version": "1.2.11", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "# Code injection in fsevents\nfsevents before 1.2.11 depends on the https://fsevents-binaries.s3-us-west-2.amazonaws.com URL, which might allow an adversary to execute arbitrary code if any JavaScript project (that depends on fsevents) distributes code that was obtained from that URL at a time when it was controlled by an adversary.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2023-45311", "https://github.com/fsevents/fsevents/commit/909af26846834642c81d19f4148afa3b7557b058", "https://github.com/atlassian/moo/blob/56ccbdd41b493332bc2cd7a4097a5802594cdb9c/package-lock.json#L1901-L1902", "https://github.com/atlassian/react-immutable-proptypes/blob/ddb9fa5194b931bf7528eb4f2c0a8c3434f70edd/package-lock.json#L153", "https://github.com/cloudflare/authr/blob/3f6129d97d06e61033a7f237d84e35e678db490f/ts/package-lock.json#L1512", "https://github.com/cloudflare/hugo-cloudflare-docs/blob/e0f7cfa195af8ef1bfa51a487be7d34ba298ed06/package-lock.json#L494", "https://github.com/cloudflare/redux-grim/blob/b652f99f95fb16812336073951adc5c5a93e2c23/package-lock.json#L266-L267", "https://github.com/cloudflare/serverless-cloudflare-workers/blob/e95e1e9c9770ed9a3d9480c1fa73e64391268354/package-lock.json#L737", "https://github.com/fsevents/fsevents", "https://github.com/fsevents/fsevents/compare/v1.2.10...v1.2.11", "https://security.snyk.io/vuln/SNYK-JS-FSEVENTS-5487987"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "MAL-2023-462", "package": "npm:fsevents", "purl": "pkg:npm/fsevents@1.2.10", "package_type": "npm", "package_usage": "optional", "version": "1.2.10", "fix_version": "1.2.11", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Malicious code in fsevents (npm)\n\n---\n_-= Per source details. Do not edit below this line.=-_\n\n## Source: ghsa-malware (acdc3ae57250fab51aeff6e3938ed40197a1b74eb688a72cd5d7eee0c77a7167)\nThis advisory is intended to inform the npm ecosystem with details to resolve a third-party malware incident that may have impacted your infrastructure if you are directly or transitively dependent on the [fsevents](https://www.npmjs.com/package/fsevents) npm package.\n\n## Overview\n\n[fsevents](https://www.npmjs.com/package/fsevents) v1.0.0 <= v1.2.10 downloaded binary executables that contained unintended code due to an expired cloud storage resource being reclaimed by a third party.\n\n## Details\n\nThe [fsevents npm package](https://www.npmjs.com/package/fsevents) v1.0.0 through v1.2.10 attempts to fetch a pre-built binary executable artifact (fse.node) from cloud storage. If this fetch fails, fsevents v1.x will attempt to build this artifact directly from source.\n\nVersion 1.x of fsevents has been deprecated for several years and as a result the aforementioned cloud storage resource namespace was available for registration. A third party, unrelated to the fsevents maintainers, subsequently claimed this namespace and in April 2023 this third party started serving modified versions of the \u201cfse.node\u201d binary executable artifact to new fsevents v1.x users. \n\nAs of April 27, 2023 the cloud storage resource in question has been indefinitely suspended and is no longer serving binaries.\n\nThe affected cloud storage pre-fetch was [removed](https://github.com/fsevents/fsevents/commit/909af26846834642c81d19f4148afa3b7557b058) in fsevents version 1.2.11.\n\n## Impact\n\nThe impact of the modified versions of fse.node appears to be limited to information gathering. \n\nNote that initial analysis was performed for the modified artifact associated with fsevents v1.2.9, which was distributed as fse-v1.2.9-node-v72-darwin-x64.tar.gz prior to the cloud storage resource being suspended. \n\nFor more detailed analysis you may compare a decompilation of the v1.x fse.node artifacts on your systems with the intended fsevents v1.x source as it exists at https://github.com/fsevents/fsevents/tree/v1.x \n\n## How to fix it\n\nIf you are dependent on the deprecated version of fsevents v1.x, the recommended course of action is to upgrade to fsevents v2.x or remove the dependency altogether as currently maintained versions of Node.js no longer require fsevents for file system watching on macOS.", "related_urls": ["https://www.npmjs.com/package/fsevents", "https://github.com/fsevents/fsevents/commit/909af26846834642c81d19f4148afa3b7557b058", "https://github.com/advisories/GHSA-xv2f-5jw4-v95m"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2022-0122", "package": "npm:node-forge", "purl": "pkg:npm/node-forge@0.10.0", "package_type": "npm", "package_usage": "optional", "version": "0.10.0", "fix_version": "1.3.0", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "# Open Redirect in node-forge\nparseUrl functionality in node-forge mishandles certain uses of backslash such as `https:/\\/\\/\\` and interprets the URI as a relative path.", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2022-0122", "https://github.com/digitalbazaar/forge/commit/db8016c805371e72b06d8e2edfe0ace0df934a5e", "https://github.com/digitalbazaar/forge", "https://huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "CVE-2021-3803", "package": "npm:nth-check", "purl": "pkg:npm/nth-check@1.0.2", "package_type": "npm", "package_usage": "optional", "version": "1.0.2", "fix_version": "2.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in nth-check\nThere is a Regular Expression Denial of Service (ReDoS) vulnerability in nth-check that causes a denial of service when parsing crafted invalid CSS nth-checks.\n\nThe ReDoS vulnerabilities of the regex are mainly due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` with quantified overlapping adjacency and can be exploited with the following code.\n\n**Proof of Concept**\n```js\n// PoC.js\nvar nthCheck = require(\"nth-check\")\nfor(var i = 1; i <= 50000; i++) {\n\t\tvar time = Date.now();\n\t\tvar attack_str = '2n' + ' '.repeat(i*10000)+\"!\";\n\t\ttry {\n\t\t\t\tnthCheck.parse(attack_str) \n\t\t}\n\t\tcatch(err) {\n\t\t\t\tvar time_cost = Date.now() - time;\n\t\t\t\tconsole.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\n\t\t}\n}\n```\n\n**The Output**\n```\nattack_str.length: 10003: 174 ms\nattack_str.length: 20003: 1427 ms\nattack_str.length: 30003: 2602 ms\nattack_str.length: 40003: 4378 ms\nattack_str.length: 50003: 7473 ms\n```", "related_urls": ["https://nvd.nist.gov/vuln/detail/CVE-2021-3803", "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726", "https://github.com/fb55/nth-check", "https://huntr.dev/bounties/8cf8cc06-d2cf-4b4e-b42c-99fafb0b04d0", "https://lists.debian.org/debian-lts-announce/2023/05/msg00023.html"], "occurrence_count": 0, "reachable_flows": 0}
{"id": "GHSA-5mrr-rgp6-x4gr", "package": "npm:marsdb", "purl": "pkg:npm/marsdb@0.6.11", "package_type": "npm", "package_usage": "required", "version": "0.6.11", "fix_version": null, "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Command Injection in marsdb\nAll versions of `marsdb` are vulnerable to Command Injection. In the `DocumentMatcher` class, selectors on `$where` clauses are passed to a Function constructor unsanitized. This allows attackers to run arbitrary commands in the system when the function is executed.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.", "related_urls": ["https://github.com/bkimminich/juice-shop/issues/1173", "https://www.npmjs.com/advisories/1122"], "occurrence_count": 1, "reachable_flows": 0}
